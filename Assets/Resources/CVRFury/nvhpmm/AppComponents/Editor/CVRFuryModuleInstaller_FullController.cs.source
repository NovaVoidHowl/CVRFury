// { "version": "0.0.128" , "canInstall": true , "optional": true , "defineSymbolSuffix": "_MI_FC", dependencies: []}
// #if UNITY_EDITOR && CVR_CCK_EXISTS

using Math = System.Math;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using UnityEditor;
using UnityEditor.Animations;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEngine.SceneManagement;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Scripts.Editor;
using ABI.CCK.Scripts;
using ABI.CCK.Components;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;
using static uk.novavoidhowl.dev.cvrfury.deployable.ReportBuilderSupport;

// temp using for testing
using System.Text;

/// <summary>
/// fullController Module
/// this is handles avatar controller/config (menus, animators etc.) just before upload/play
/// </summary>

namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  public class fullControllerModuleProcessor : IModuleProcessor
  {
    public void ProcessModule(CVRFuryModule module, GameObject targetAvatar, int DSUNumber)
    {
      // Implementation for fullControllerModuleProcessor
      // console print to say this function is being called
      CoreLog("fullControllerModuleProcessor.ProcessModule() called");

      // log the module's moduleType to the console
      CoreLog("module.ModuleType: " + module.ModuleType);

      // access the CVRAvatar component on the targetAvatar
      CVRAvatar avatar = targetAvatar.GetComponent<CVRAvatar>();

      // check if the avatar exists
      if (avatar != null)
      {
        // we have the avatar, and it is valid, also we have a FullController type Module
        // so we need to ensure that 'advanced avatar settings' is enabled on the avatar
        avatar.avatarUsesAdvancedSettings = true;

        // get the avatarSettings from the avatar
        CVRAdvancedAvatarSettings advancedAvatarSettings = avatar.avatarSettings;

        // get the list of menu stores from the avatarSettings (settings public variable)
        List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList = advancedAvatarSettings.settings;

        // section to handle CVR Fury Controllers
        // check and see if the module has any controllers
        if ((module as fullControllerModule).controllers.Count > 0)
        {
          //// path vars section

          // create a folder in the project to store the generated controller
          // this is based on Constants.ASSETS_MANAGED_FOLDER + /GeneratedControllers/+ AvatarName
          string generatedControllersFolder = Constants.ASSETS_MANAGED_FOLDER + "/GeneratedControllers/" + avatar.name;

          if (!Directory.Exists(generatedControllersFolder))
          {
              Directory.CreateDirectory(generatedControllersFolder);
          }

          // ensure the temp folder exists
          if (!Directory.Exists(Constants.ASSETS_TEMP_FOLDER))
          {
            Directory.CreateDirectory(Constants.ASSETS_TEMP_FOLDER);
          }

          //// file paths for the generated controllers/locks etc.

          // create a new override controller file path based on the generatedControllersFolder
          // called 'overrides_controller_'avatar.name
          string overrideControllerPath =
            generatedControllersFolder + "/overrides_controller_" + avatar.name + ".overrideController";

          // create a new animator controller file path based on the generatedControllersFolder
          // called 'final_controller_'avatar.name
          string finalControllerPath = generatedControllersFolder + "/final_controller_" + avatar.name + ".controller";

          // create animatorProcessing lock file path based on the generatedControllersFolder called 'processing.lock'
          string processingLockPath = generatedControllersFolder + "/processing.lock";

          // create baseControllerImport lock file path based on the generatedControllersFolder
          // called 'baseControllerImport.lock'
          string baseControllerImportLockPath = generatedControllersFolder + "/baseControllerImport.lock";

          // create build report file path based on the generatedControllersFolder called 'build_report.txt'
          string buildReportPath =
            generatedControllersFolder + "/" + module.ModuleType + "_build_report_" + module.name + ".txt";

          // call the report init function if the build report file doesn't exist
          if (!File.Exists(buildReportPath))
          {
            // call the report init function
            ReportInit(buildReportPath, avatar, module);
          }

          // loop through the controllers in the module
          foreach (RuntimeAnimatorController controller in (module as fullControllerModule).controllers)
          {
            // log the controller's name to the console
            CoreLog("controller.name: " + controller.name);
            ReportAddLine(buildReportPath, "controller.name: " + controller.name);
            ReportAddBlankLine(buildReportPath);

            // get the baseController from the avatarSettings
            RuntimeAnimatorController baseController = advancedAvatarSettings.baseController;

            // check if baseController don't exist
            if (baseController == null)
            {
              // if they don't, log an error to the console
              Debug.LogError("No base controller found, restoring defaults");
              ReportAddErrorLine(buildReportPath, "No base controller found, restoring defaults");
              // set the  the CCK default animator controller to the controller file at path
              // /Assets/ABI.CCK/Animations/AvatarAnimator.controller
              advancedAvatarSettings.baseController = AssetDatabase.LoadAssetAtPath<AnimatorController>(
                "Assets/ABI.CCK/Animations/AvatarAnimator.controller"
              );
            }
            // so we now have a baseController we can build upon should there not be any built ones



            //// flow checks

            // check the lock file to see if controller processing is in progress
            // if it is, we already have a controller in progress from this and can add to it
            // if it isn't, then what we have is the old controller and we need to start fresh

            //vars to hold the controller/override files
            AnimatorOverrideController CVRFuryOverrides;
            AnimatorController CVRFuryFinalController;

            // check if the processing lock file exists
            if (File.Exists(processingLockPath))
            {
              //console print to say we are continuing with controller processing
              CoreLog("Continuing with controller processing");
              ReportAddBlankLine(buildReportPath);
              ReportAddLine(buildReportPath, "Continuing with controller processing");

              // currently exists so there should be a controller set in progress so load them
              // load the override controller file
              CVRFuryOverrides = AssetDatabase.LoadAssetAtPath<AnimatorOverrideController>(overrideControllerPath);

              // load the animator controller file
              CVRFuryFinalController = AssetDatabase.LoadAssetAtPath<AnimatorController>(finalControllerPath);
            }
            else
            {
              //console print to say we are starting fresh
              CoreLog("New processing run creating fresh controllers");
              ReportAddBlankLine(buildReportPath);
              ReportAddLine(buildReportPath, "New processing run creating fresh controllers");

              // no lock file so we need to start fresh
              // get rid of any existing controller/import lock files
              AssetDatabase.DeleteAsset(overrideControllerPath);
              AssetDatabase.DeleteAsset(finalControllerPath);
              AssetDatabase.DeleteAsset(baseControllerImportLockPath);

              // create the override file
              AssetDatabase.CreateAsset(new AnimatorOverrideController(), overrideControllerPath);

              // load the override controller file
              CVRFuryOverrides = AssetDatabase.LoadAssetAtPath<AnimatorOverrideController>(overrideControllerPath);

              // create the controller file
              AssetDatabase.CreateAsset(new AnimatorController(), finalControllerPath);

              // load the animator controller file
              CVRFuryFinalController = AssetDatabase.LoadAssetAtPath<AnimatorController>(finalControllerPath);

              // create the lock file
              File.WriteAllText(processingLockPath, string.Empty);
            }
            // at this point we have the override controller and the final controller loaded

            // link the final controller to the overrides
            CVRFuryOverrides.runtimeAnimatorController = CVRFuryFinalController;

            // check to see if the baseControllerImport lock file exists
            if (!File.Exists(baseControllerImportLockPath))
            {
              // if it doesn't, we need to import the base controller/user's controller
              // set the baseControllerImport lock file
              File.WriteAllText(baseControllerImportLockPath, string.Empty);

              // load the animator from the advancedAvatarSettings
              AnimatorController userAnimator = advancedAvatarSettings.animator;

              // load the overrides from the advancedAvatarSettings
              AnimatorOverrideController userOverrides = advancedAvatarSettings.overrides;

              ReportAddLine(buildReportPath, "Importing base controller");
              // now if the user already has an animator and overrides we need to use those as a base,
              // if not we use the base controller
              if (userAnimator != null)
              {
                // print to console that user controller is being used
                CoreLog("Using current AAS controller as base controller");
                ReportAddLine(buildReportPath, "Using current AAS controller as base controller");
                // loop through the parameters of the user's animator and add them to the final controller
                foreach (AnimatorControllerParameter parameter in userAnimator.parameters)
                {
                  CVRFuryFinalController.AddParameter(parameter);
                }

                // get the file path for the user's animator
                string userAnimatorPath = AssetDatabase.GetAssetPath(userAnimator);

                // create UUID for the user's animator temp file
                System.Guid ephemeralUserAnimatorUUID = System.Guid.NewGuid();

                // temp file path
                string tempUserAnimatorPath = Constants.ASSETS_TEMP_FOLDER + "/" + ephemeralUserAnimatorUUID + ".controller";
                // copy the user's animator to a temp file
                AssetDatabase.CopyAsset(userAnimatorPath, tempUserAnimatorPath);
                AssetDatabase.SaveAssets();
                AssetDatabase.Refresh();

                // load the temp user's animator
                AnimatorController tempUserAnimator = AssetDatabase.LoadAssetAtPath<AnimatorController>(tempUserAnimatorPath);


                // loop through the layers of the user's animator and add them to the final controller
                foreach (AnimatorControllerLayer layer in tempUserAnimator.layers)
                {
                  CVRFuryFinalController.AddLayer(layer);
                }

                // null the temp user's animator
                tempUserAnimator = null;

                // now handel the user overrides

                // check if the user's overrides are not null
                if (userOverrides != null)
                {
                  // Create a list to hold the overrides
                  List<KeyValuePair<AnimationClip, AnimationClip>> overrides =
                    new List<KeyValuePair<AnimationClip, AnimationClip>>();

                  // Get the overrides from the user's AnimatorOverrideController
                  userOverrides.GetOverrides(overrides);

                  // Loop through the overrides and add them to the final controller
                  foreach (KeyValuePair<AnimationClip, AnimationClip> overrideClip in overrides)
                  {
                    // Assuming CVRFuryOverrides is an AnimatorOverrideController
                    CVRFuryOverrides[overrideClip.Key] = overrideClip.Value;
                  }
                }
              }
              else
              {
                // print to console that base controller is being used
                CoreLog("Using base controller as user controller is null");
                ReportAddLine(buildReportPath, "Using base controller as user controller is null");
                // Cast the baseController to AnimatorController
                AnimatorController baseAnimatorController = baseController as AnimatorController;

                if (baseAnimatorController != null)
                {
                  // loop through the parameters of the base controller and add them to the final controller
                  foreach (AnimatorControllerParameter parameter in baseAnimatorController.parameters)
                  {
                    CVRFuryFinalController.AddParameter(parameter);
                  }

                  // get the file path for the base controller
                  string baseControllerPath = AssetDatabase.GetAssetPath(baseController);

                  // create UUID for the base controller temp file
                  System.Guid ephemeralBaseControllerUUID = System.Guid.NewGuid();

                  // temp file path
                  string tempBaseControllerPath = Constants.ASSETS_TEMP_FOLDER + "/" + ephemeralBaseControllerUUID + ".controller";
                  // copy the base controller to a temp file
                  
                  AssetDatabase.CopyAsset(baseControllerPath, tempBaseControllerPath);
                  AssetDatabase.SaveAssets();
                  AssetDatabase.Refresh();

                  // load the temp base controller
                  AnimatorController tempBaseController = AssetDatabase.LoadAssetAtPath<AnimatorController>(tempBaseControllerPath);

                  // loop through the layers of the base controller and add them to the final controller
                  foreach (AnimatorControllerLayer layer in tempBaseController.layers)
                  {
                    CVRFuryFinalController.AddLayer(layer);
                  }

                  // null the temp base controller
                  tempBaseController = null;
                }
                else
                {
                  // Handle the case where baseController could not be cast to AnimatorController
                  Debug.LogError("baseController is not an AnimatorController");
                  ReportAddErrorLine(buildReportPath, "[CRITICAL]: baseController is not an AnimatorController");
                }
              }
            }

            // ok so at this point we should have everything from the base controller in the final controller
            // along with any previous module's additions (we only import the base once, hence the lock file)
            // so now we need to add bits the current controller we are processing

            // get the controller
            AnimatorController sourceAnimatorController = controller as AnimatorController;

            // get the file path for the controller
            string controllerPath = AssetDatabase.GetAssetPath(sourceAnimatorController);

            // create UUID for the controller temp file
            System.Guid ephemeralControllerUUID = System.Guid.NewGuid();

            // temp file path
            string tempControllerPath = Constants.ASSETS_TEMP_FOLDER + "/" + ephemeralControllerUUID + ".controller";

            // copy the controller to a temp file
            AssetDatabase.CopyAsset(controllerPath, tempControllerPath);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

            // load the temp controller
            AnimatorController animatorController = AssetDatabase.LoadAssetAtPath<AnimatorController>(tempControllerPath);

            // log the controller's name to the console and build report
            CoreLog("animatorController.name: " + animatorController.name);
            ReportAddLine(buildReportPath, "animatorController.name: " + animatorController.name);
            ReportAddBlankLine(buildReportPath);

            // check if the controller is an AnimatorController
            if (animatorController != null)
            {
              // get a list of the parameters from the controller
              List<AnimatorControllerParameter> parameters = new List<AnimatorControllerParameter>(
                animatorController.parameters
              );

              // get a list of the layers from the controller
              List<AnimatorControllerLayer> layers = new List<AnimatorControllerLayer>(animatorController.layers);

              // get a list of layers from the final controller
              List<AnimatorControllerLayer> finalLayers = new List<AnimatorControllerLayer>(
                CVRFuryFinalController.layers
              );

              // get a list of the parameters from the final controller
              List<AnimatorControllerParameter> finalParameters = new List<AnimatorControllerParameter>(
                CVRFuryFinalController.parameters
              );

              // add parameters heading to the build report
              ReportAddLine(buildReportPath, "Adding parameters from controller");
              ReportAddBlankLine(buildReportPath);

              // list to hold converted standard parameters (tuple of old name and new name)
              List<(string OldName, string NewName)> convertedStandardParams = new List<(string OldName, string NewName)>();

              // process the parameters from the controller
              foreach (AnimatorControllerParameter parameter in parameters)
              {
                // check the global parameters from the module is null and if so make an empty list
                // this is to prevent null reference exceptions
                if ((module as fullControllerModule).globalParams == null)
                {
                  (module as fullControllerModule).globalParams = new List<string>();
                }

                // concatenate the global parameters from the module with the global parameters from the
                // constants class to get a list of all global parameters
                // note: source parameters constants are:
                //  - ALWAYS_GLOBAL_PARAMETERS_FROM_CVR
                // and
                //  - ALWAYS_GLOBAL_PARAMETERS_FROM_VRC
                // this is to ensure all parameters people expect to be global are global
                // only add the ones from VRC if the module is marked as imported from VRCFury (importedFromVRCFury)
                List<string> globalParams = (module as fullControllerModule).globalParams
                  .Concat(Constants.ALWAYS_GLOBAL_PARAMETERS_FROM_CVR)
                  .Concat((module as fullControllerModule).importedFromVRCFury
                    ? Constants.ALWAYS_GLOBAL_PARAMETERS_FROM_VRC
                    : new List<string>())
                  .ToList();
                
                // de-dupe the global parameters list
                globalParams = globalParams.Distinct().ToList();

                // put the global parameters list back into the module
                (module as fullControllerModule).globalParams = globalParams;
                
                // check if the parameter is a global parameter
                if ((module as fullControllerModule).globalParams.Contains(parameter.name))
                {
                  // check if the parameter is already in the final controller
                  if (!finalParameters.Any(p => p.name == parameter.name))
                  {
                    // if it isn't, add the parameter to the final controller
                    CVRFuryFinalController.AddParameter(parameter);
                    // add the parameter to the build report
                    ReportAddLine(
                      buildReportPath,
                      "Parameter " + parameter.name + " (Global) added to final controller"
                    );
                  }
                  else
                  {
                    // Handle the case where the parameter is already in the final controller
                    Debug.LogError("Global Parameter " + parameter.name + " already exists in the final controller");
                    ReportAddErrorLine(
                      buildReportPath,
                      "Global Parameter " + parameter.name + " already exists in the final controller"
                    );
                  }
                }
                else
                {
                  // build new parameter name based on DSU number
                  string newParameterName = "[CVRFury_" + DSUNumber + "]_" + parameter.name;

                  // check if the new parameter name is already in the final controller
                  if (!finalParameters.Any(p => p.name == newParameterName))
                  {
                    // add the old and new parameter names to the convertedStandardParams list
                    convertedStandardParams.Add((parameter.name, newParameterName));

                    // if it isn't, update the name and add the parameter to the final controller
                    parameter.name = newParameterName;
                    CVRFuryFinalController.AddParameter(parameter);
                    // add the parameter to the build report
                    ReportAddLine(
                      buildReportPath,
                      "Parameter " + parameter.name + " (Standard) added to final controller"
                    );
                  }
                  else
                  {
                    // Handle the case where the parameter is already in the final controller,
                    // (should not be possible, but best to check)
                    Debug.LogError(
                      "Standard Parameter "
                        + parameter.name
                        + " already exists in the final controller\nPlease check the module for duplicate parameters"
                    );
                    ReportAddErrorLine(
                      buildReportPath,
                      "[CRITICAL]: Standard Parameter "
                        + parameter.name
                        + " already exists in the final controller\nPlease check the module for duplicate parameters"
                    );
                  }
                }
              }

              // TODO: remove this debug log
              // debug log the converted standard parameters
              // Initialize an empty string to hold the debug message
              StringBuilder debugMessage = new StringBuilder();

              // Append each converted parameter to the debug message
              foreach ((string OldName, string NewName) convertedParam in convertedStandardParams)
              {
                debugMessage.AppendLine("Converted standard parameter: " + convertedParam.OldName + " to " + convertedParam.NewName);
              }

              // Debug log the entire message
              Debug.Log(debugMessage.ToString());

              // add layers heading to the build report
              ReportAddLine(buildReportPath, "Adding layers from controller");
              ReportAddBlankLine(buildReportPath);

              // check if any of the layers from the controller are already in the final controller
              foreach (AnimatorControllerLayer layer in layers)
              {
                // build new layer name based on DSU number
                string newLayerName = "[CVRFury_" + DSUNumber + "]_" + layer.name;

                // get a list of layer names form the final controller
                List<string> finalLayerNames = finalLayers.Select(l => l.name).ToList();

                // check if the new layer name is already in that list
                if (!finalLayerNames.Contains(newLayerName))
                {
                  // only bother processing the layer if it has states (to avoid empty layers)
                  if (layer.stateMachine.states.Length > 0)
                  {

                    // instantiate a new layer
                    AnimatorControllerLayer newLayer = new AnimatorControllerLayer();

                    // copy all the existing layer properties to the new layer
                    newLayer.avatarMask = layer.avatarMask;
                    newLayer.blendingMode = layer.blendingMode;
                    newLayer.defaultWeight = layer.defaultWeight;
                    newLayer.iKPass = layer.iKPass;
                    newLayer.name = newLayerName;
                    newLayer.stateMachine = layer.stateMachine;

                    // ok so now we have a new layer instance so it should have new references etc


                    
                    ReportAddLine(buildReportPath, "Layer " + newLayer.name + " added to final controller");

                    // console print the number of states in the layer
                    CoreLog("Layer " + newLayer.name + " has " + newLayer.stateMachine.states.Length + " states");
                    
                    // console print the name of each state in the layer
                    foreach (ChildAnimatorState state in newLayer.stateMachine.states)
                    {
                      CoreLog("State: " + state.state.name);

                      // temp transitions list
                      List<AnimatorStateTransition> transitions = new List<AnimatorStateTransition>();

                      // get all out bound transitions from the state
                      for (int i = 0; i < state.state.transitions.Length; i++)
                      {
                        // make new transition so the ids are not the same
                        AnimatorStateTransition transition = new AnimatorStateTransition();

                        // copy the transition parameters from the state
                        transition.canTransitionToSelf = state.state.transitions[i].canTransitionToSelf;
                        transition.duration = state.state.transitions[i].duration;
                        transition.exitTime = state.state.transitions[i].exitTime;
                        transition.hasExitTime = state.state.transitions[i].hasExitTime;
                        transition.hasFixedDuration = state.state.transitions[i].hasFixedDuration;
                        transition.interruptionSource = state.state.transitions[i].interruptionSource;
                        transition.offset = state.state.transitions[i].offset;
                        transition.conditions = state.state.transitions[i].conditions;
                        transition.destinationState = state.state.transitions[i].destinationState;
                        transition.destinationStateMachine = state.state.transitions[i].destinationStateMachine;
                        transition.isExit = state.state.transitions[i].isExit;
                        transition.mute = state.state.transitions[i].mute;
                        transition.solo = state.state.transitions[i].solo;
                        transition.hideFlags = state.state.transitions[i].hideFlags;
                        transition.name = state.state.transitions[i].name;

                        // now we have a new transition instance we can process it


                        // console print the name of the transition
                        CoreLog("Transition ID: " + transition.GetInstanceID());
                      
                        // console print the name of the destination state
                        CoreLog("Destination State: " + transition.destinationState.name);
                      
                        // temp array to hold the conditions
                        
                        List<AnimatorCondition> tempConditions = new List<AnimatorCondition>();

                        // for each condition in the transition
                        for (int j = 0; j < transition.conditions.Length; j++)
                        {
                          AnimatorCondition condition = transition.conditions[j];
                      
                          // console print the name of the condition
                          CoreLog("Condition: " + condition.parameter + " " + condition.mode + " " + condition.threshold);
                      
                          // check if the condition.parameter is on the convertedStandardParams list and if so update it
                          if (convertedStandardParams.Any(p => p.OldName == condition.parameter))
                          {
                            // get the new parameter name from the convertedStandardParams list
                            string newParameterName = convertedStandardParams.First(p => p.OldName == condition.parameter).NewName;
                      
                            // get the old parameter name
                            string paramOldName = condition.parameter;
                      
                            // console print the updated condition name
                            CoreLog("Updated Condition parameter from " + paramOldName + " to " + newParameterName);
                      
                      
                            // Add a new condition with the new parameter name to the temp transition list
                            tempConditions.Add(new AnimatorCondition
                            {
                              parameter = newParameterName,
                              mode = condition.mode,
                              threshold = condition.threshold
                            });
                            
                          }
                          else
                          {
                            // Add the condition to the temp transition list
                            tempConditions.Add(condition);
                          }
                        }

                        // overwrite the conditions in the transition with the temp list
                        transition.conditions = tempConditions.ToArray();


                        // write the transition to the temp transition list
                        transitions.Add(transition);

                      }
                      // overwrite the transitions in the state with the temp list
                      state.state.transitions = transitions.ToArray();
                    }

                    // add the layer to the final controller
                    CVRFuryFinalController.AddLayer(newLayer);


                  }
                }
                else
                {
                  // Handle the case where the layer is already in the final controller
                  Debug.LogError("Layer " + layer.name + " already exists in the final controller");
                  ReportAddErrorLine(
                    buildReportPath,
                    "[WARNING]: Layer " + layer.name + " already exists in the final controller"
                  );
                }
              }

              // TODO: really need to handel the case where there are conflicts between the base controller
              //       and the one we are making, rather than just skipping the conflicts
            }
            else
            {
              // Handle the case where controller could not be cast to AnimatorController
              Debug.LogError("controller is not an AnimatorController");
              ReportAddErrorLine(buildReportPath, "[CRITICAL]: controller is not an AnimatorController");
            }

            // at this point we need to set the animator and overrides in the advancedAvatarSettings
            // so that they can be used in the next module (additive process)

            // set the animator in the advancedAvatarSettings
            advancedAvatarSettings.animator = CVRFuryFinalController;

            // set the overrides in the advancedAvatarSettings
            advancedAvatarSettings.overrides = CVRFuryOverrides;

            // set the core Overrides in the avatar
            avatar.overrides = CVRFuryOverrides;

            // report that the controller has been processed
            ReportAddLine(buildReportPath, "Controller processed");

            // null the temp controller
            animatorController = null;


            // notes: under advancedAvatarSettings there are the following public variables
            // settings: List<CVRAdvancedSettingsEntry> - list of settings for the avatar
            // animator: Animator - the final animator for the avatar (after compiling all layers etc)
            // overrides: AnimatorOverrideController - the overrides for the avatar animator above
            // baseController: RuntimeAnimatorController - the base controller for the avatar
            // baseOverrideController: RuntimeAnimatorController - the base override controller for the avatar
            //                         ref baseController
            // the base ones are used as input for the final animator to be built atop





            // TODO
          }

          // end the report
          ReportEnd(buildReportPath);
        }

        // section to handle CVR Fury Menu Store
        // check and see if the module has any menus
        if ((module as fullControllerModule).menus.Count > 0)
        {
          // loop through the menus in the module
          foreach (fullControllerModule.MenuEntry menuEntry in (module as fullControllerModule).menus)
          {
            // log the menu's name to the console
            CoreLog("menuEntry.menu.name: " + menuEntry.menu.name);

            // get the menu's prefix
            string prefix = menuEntry.prefix;

            // if the prefix is not null or empty add a forward slash to the end
            if (!string.IsNullOrEmpty(prefix))
            {
              prefix += "/";
            }

            if (!menuEntry.forcePrefixStringFormat)
            {
              // force all backslashes to forward slashes in the prefix
              // this is to ensure that the menu structure is correctly formatted
              // for DakyModsCVR's ActionMenu mod (if the user has it installed)
              // ref https://github.com/dakyneko/DakyModsCVR/tree/master/ActionMenu
              prefix = prefix.Replace("\\", "/");
            }

            // load the menu file from the menuEntry
            CVRFuryMenuStore menu = menuEntry.menu;

            // check if the menu exists
            if (menu != null)
            {
              // now we can access the menu's properties
              // load the menu's menuItems
              List<menuParameter> menuItems = menu.menuItems;

              // loop through the menuItems
              foreach (menuParameter menuItem in menuItems)
              {
                // case statement to handle the different types of menu items
                switch (menuItem.MenuParameterType)
                {
                  case "toggleParameter":
                    // cast the menuItem to a toggleParameter
                    toggleParameter toggleParam = menuItem as toggleParameter;
                    // call the ProcessToggleParameter function to handle the toggle parameter
                    ProcessToggleParameter(toggleParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "dropdownParameter":
                    // cast the menuItem to a dropdownParameter
                    dropdownParameter dropdownParam = menuItem as dropdownParameter;
                    // call the ProcessDropdownParameter function to handle the dropdown parameter
                    ProcessDropdownParameter(dropdownParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "sliderParameter":
                    // cast the menuItem to a sliderParameter
                    sliderParameter sliderParam = menuItem as sliderParameter;
                    // call the ProcessSliderParameter function to handle the slider parameter
                    ProcessSliderParameter(sliderParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "twoDJoystickParameter":
                    // cast the menuItem to a twoDJoystickParameter
                    twoDJoystickParameter twoDJoystickParam = menuItem as twoDJoystickParameter;
                    // call the ProcessTwoDJoystickParameter function to handle the twoDJoystick parameter
                    ProcessTwoDJoystickParameter(twoDJoystickParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "threeDJoystickParameter":
                    // cast the menuItem to a threeDJoystickParameter
                    threeDJoystickParameter threeDJoystickParam = menuItem as threeDJoystickParameter;
                    // call the ProcessThreeDJoystickParameter function to handle the threeDJoystick parameter
                    ProcessThreeDJoystickParameter(threeDJoystickParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  default:
                    // if the menuItem is not valid, log an error to the console
                    Debug.LogError("Unknown menu item type: " + menuItem.MenuParameterType);
                    break;
                }
              }
            }
          }
        }

        // TODO: // section to handel CVR Fury Parameters
        // check and see if the module has any parameters
        // if ((module as fullControllerModule).parameters.Count > 0)
        // {
        //   // loop through the parameters in the module
        //   foreach (fullControllerModule.ParamsEntry paramEntry in (module as fullControllerModule).parameters)
        //   {
        //     // log the parameter's name to the console
        //     CoreLog("paramEntry.parameters.name: " + paramEntry.parameters.name);

        //     // TODO
        //   }
        // }

        // TODO: // section to handle CVR Fury Smoothed Parameters
        // check and see if the module has any smoothed parameters
        // if ((module as fullControllerModule).smoothedPrms.Count > 0)
        // {
        //   // loop through the smoothed parameters in the module
        //   foreach (
        //     fullControllerModule.SmoothParamEntry smoothedParamEntry in (module as fullControllerModule).smoothedPrms
        //   )
        //   {
        //     // log the smoothed parameter's name to the console
        //     CoreLog("smoothedParamEntry.name: " + smoothedParamEntry.name);

        //     // TODO
        //   }
        // }

        // TODO: // section to handle CVR Fury Toggle Parameter
        // check and see if the module has a toggle parameter
        // if (!string.IsNullOrWhiteSpace((module as fullControllerModule).toggleParam))
        // {
        //   // log the toggle parameter's name to the console
        //   CoreLog("toggleParam: " + (module as fullControllerModule).toggleParam);
        // }

        // TODO: // section to handle CVR Fury Binding Rewrites
        // check and see if the module has any binding rewrites
        // if ((module as fullControllerModule).rewriteBindings.Count > 0)
        // {
        //   // loop through the binding rewrites in the module
        //   foreach (fullControllerModule.BindingRewrite rewrite in (module as fullControllerModule).rewriteBindings)
        //   {
        //     // log the binding rewrite's name to the console
        //     CoreLog(
        //       "rewrite.from: " + rewrite.from + "\n rewrite.to: " + rewrite.to + "\n rewrite.delete: " + rewrite.delete
        //     );
        //   }
        // }
      }
      else
      {
        // if it doesn't, log an error to the console
        Debug.LogError("Avatar does not exist");
      }
    }

    //// -------------------------------------------- supporting functions ---------------------------------------------

    // general functions

    private string formatParameterNameForMachineName(string name)
    {
      // remove any spaces from the name
      return name.Replace(" ", "");
    }

    // functions to handle CVR Fury Menu Store bits --------------------------------------------------------------------

    public void ProcessToggleParameter(
      toggleParameter toggleParam,
      string prefix,
      List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList
    )
    {
      // log the toggle parameter's name to the console
      CoreLog("toggleParam.name: " + toggleParam.name);

      // log the toggle parameter's default state to the console
      CoreLog("toggleParam.defaultState: " + toggleParam.defaultState);

      // log the toggle parameter's generate type to the console
      CoreLog("toggleParam.generateType: " + toggleParam.generateType);

      // create CVRAdvancedSettingsEntry for the toggle parameter
      CVRAdvancedSettingsEntry toggleEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.GameObjectToggle
      toggleEntry.type = CVRAdvancedSettingsEntry.SettingsType.GameObjectToggle;

      // set the CVRAdvancedSettingsEntry's name to the toggle parameter's name with the prefix
      toggleEntry.name = prefix + toggleParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the toggle parameter's name with the prefix
      toggleEntry.machineName = formatParameterNameForMachineName(prefix + toggleParam.name);

      // create a new CVRAdvancesAvatarSettingGameObjectToggle
      CVRAdvancesAvatarSettingGameObjectToggle toggleSetting = new CVRAdvancesAvatarSettingGameObjectToggle();

      // set the CVRAdvancesAvatarSettingGameObjectToggle's defaultValue to the toggle parameter's default state
      toggleSetting.defaultValue = toggleParam.defaultState;

      // set the CVRAdvancesAvatarSettingGameObjectToggle's usedType to the toggle parameter's generate type via a cast
      switch (toggleParam.generateType)
      {
        case toggleParameter.GenerateType.Bool:
          toggleSetting.usedType = CVRAdvancesAvatarSettingGameObjectToggle.ParameterType.GenerateBool;
          break;
        case toggleParameter.GenerateType.Float:
          toggleSetting.usedType = CVRAdvancesAvatarSettingGameObjectToggle.ParameterType.GenerateFloat;
          break;
        case toggleParameter.GenerateType.Int:
          toggleSetting.usedType = CVRAdvancesAvatarSettingGameObjectToggle.ParameterType.GenerateInt;
          break;
      }

      // put the CVRAdvancesAvatarSettingGameObjectToggle into the CVRAdvancedSettingsEntry's value
      toggleEntry.setting = toggleSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(toggleEntry);
    }

    public void ProcessDropdownParameter(
      dropdownParameter dropdownParam,
      string prefix,
      List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList
    )
    {
      // log the dropdown parameter's name to the console
      CoreLog("dropdownParam.name: " + dropdownParam.name);

      // create CVRAdvancedSettingsEntry for the dropdown parameter
      CVRAdvancedSettingsEntry dropdownEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.GameObjectDropdown
      dropdownEntry.type = CVRAdvancedSettingsEntry.SettingsType.GameObjectDropdown;

      // set the CVRAdvancedSettingsEntry's name to the dropdown parameter's name with the prefix
      dropdownEntry.name = prefix + dropdownParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the dropdown parameter's name with the prefix
      dropdownEntry.machineName = formatParameterNameForMachineName(prefix + dropdownParam.name);

      // create a new CVRAdvancesAvatarSettingGameObjectDropdown
      CVRAdvancesAvatarSettingGameObjectDropdown dropdownSetting = new CVRAdvancesAvatarSettingGameObjectDropdown();

      // set the CVRAdvancesAvatarSettingGameObjectDropdown's defaultValue to the dropdown parameter's default index
      dropdownSetting.defaultValue = dropdownParam.defaultIndex;

      // console print the dropdown parameter's default index
      CoreLog("dropdownParam.defaultIndex: " + dropdownParam.defaultIndex);

      // console print the dropdown parameter's generate type
      CoreLog("dropdownParam.generateType: " + dropdownParam.generateType);

      // set the CVRAdvancesAvatarSettingGameObjectDropdown's usedType to the dropdown parameter's
      // generate type via a cast
      switch (dropdownParam.generateType)
      {
        case dropdownParameter.GenerateType.Float:
          dropdownSetting.usedType = CVRAdvancesAvatarSettingGameObjectDropdown.ParameterType.GenerateFloat;
          break;
        case dropdownParameter.GenerateType.Int:
          dropdownSetting.usedType = CVRAdvancesAvatarSettingGameObjectDropdown.ParameterType.GenerateInt;
          break;
      }

      // create a CVRAdvancedSettingsDropDownEntry list for the dropdownSetting's options
      List<CVRAdvancedSettingsDropDownEntry> dropdownOptions = new List<CVRAdvancedSettingsDropDownEntry>();

      // loop through the dropdownParam's options
      foreach (string option in dropdownParam.dropdownList)
      {
        // create a new CVRAdvancedSettingsDropDownEntry
        CVRAdvancedSettingsDropDownEntry dropdownOption = new CVRAdvancedSettingsDropDownEntry();

        // set the CVRAdvancedSettingsDropDownEntry's name to the option
        dropdownOption.name = option;

        // add the CVRAdvancedSettingsDropDownEntry to the dropdownOptions list
        dropdownOptions.Add(dropdownOption);
      }

      // set the CVRAdvancesAvatarSettingGameObjectDropdown's options to the dropdownOptions list
      dropdownSetting.options = dropdownOptions;

      // put the CVRAdvancesAvatarSettingGameObjectDropdown into the CVRAdvancedSettingsEntry's value
      dropdownEntry.setting = dropdownSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(dropdownEntry);
    }

    public void ProcessSliderParameter(
      sliderParameter sliderParam,
      string prefix,
      List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList
    )
    {
      // log the slider parameter's name to the console
      CoreLog("sliderParam.name: " + sliderParam.name);

      // create CVRAdvancedSettingsEntry for the slider parameter
      CVRAdvancedSettingsEntry sliderEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.Slider
      sliderEntry.type = CVRAdvancedSettingsEntry.SettingsType.Slider;

      // set the CVRAdvancedSettingsEntry's name to the slider parameter's name with the prefix
      sliderEntry.name = prefix + sliderParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the slider parameter's name with the prefix
      sliderEntry.machineName = formatParameterNameForMachineName(prefix + sliderParam.name);

      // create a new CVRAdvancesAvatarSettingSlider
      CVRAdvancesAvatarSettingSlider sliderSetting = new CVRAdvancesAvatarSettingSlider();

      // set the CVRAdvancesAvatarSettingSlider's defaultValue to the slider parameter's default value
      sliderSetting.defaultValue = sliderParam.defaultValue;

      // put the CVRAdvancesAvatarSettingSlider into the CVRAdvancedSettingsEntry's value
      sliderEntry.setting = sliderSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(sliderEntry);
    }

    public void ProcessTwoDJoystickParameter(
      twoDJoystickParameter twoDJoystickParam,
      string prefix,
      List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList
    )
    {
      // log the twoDJoystick parameter's name to the console
      CoreLog("twoDJoystickParam.name: " + twoDJoystickParam.name);

      // create CVRAdvancedSettingsEntry for the twoDJoystick parameter
      CVRAdvancedSettingsEntry twoDJoystickEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.Joystick2D
      twoDJoystickEntry.type = CVRAdvancedSettingsEntry.SettingsType.Joystick2D;

      // set the CVRAdvancedSettingsEntry's name to the twoDJoystick parameter's name with the prefix
      twoDJoystickEntry.name = prefix + twoDJoystickParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the twoDJoystick parameter's name with the prefix
      twoDJoystickEntry.machineName = formatParameterNameForMachineName(prefix + twoDJoystickParam.name);

      // create a new CVRAdvancesAvatarSettingJoystick2D
      CVRAdvancesAvatarSettingJoystick2D twoDJoystickSetting = new CVRAdvancesAvatarSettingJoystick2D();

      // set the CVRAdvancesAvatarSettingTwoDJoystick's defaultValue to the twoDJoystick parameter's default values
      // note in this case the default value is a Vector2, filled by two floats
      twoDJoystickSetting.defaultValue = new Vector2(twoDJoystickParam.defaultXValue, twoDJoystickParam.defaultYValue);

      // set the minimum pair of values for the twoDJoystick parameter
      twoDJoystickSetting.rangeMin = new Vector2(twoDJoystickParam.minXValue, twoDJoystickParam.minYValue);

      // set the maximum pair of values for the twoDJoystick parameter
      twoDJoystickSetting.rangeMax = new Vector2(twoDJoystickParam.maxXValue, twoDJoystickParam.maxYValue);

      // put the CVRAdvancesAvatarSettingTwoDJoystick into the CVRAdvancedSettingsEntry's value
      twoDJoystickEntry.setting = twoDJoystickSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(twoDJoystickEntry);
    }

    public void ProcessThreeDJoystickParameter(
      threeDJoystickParameter threeDJoystickParam,
      string prefix,
      List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList
    )
    {
      // log the threeDJoystick parameter's name to the console
      CoreLog("threeDJoystickParam.name: " + threeDJoystickParam.name);

      // create CVRAdvancedSettingsEntry for the threeDJoystick parameter
      CVRAdvancedSettingsEntry threeDJoystickEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.ThreeDJoystick
      threeDJoystickEntry.type = CVRAdvancedSettingsEntry.SettingsType.Joystick3D;

      // set the CVRAdvancedSettingsEntry's name to the threeDJoystick parameter's name with the prefix
      threeDJoystickEntry.name = prefix + threeDJoystickParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the threeDJoystick parameter's name with the prefix
      threeDJoystickEntry.machineName = formatParameterNameForMachineName(prefix + threeDJoystickParam.name);

      // create a new CVRAdvancesAvatarSettingJoystick3D
      CVRAdvancesAvatarSettingJoystick3D threeDJoystickSetting = new CVRAdvancesAvatarSettingJoystick3D();

      // set the CVRAdvancesAvatarSettingThreeDJoystick's defaultValue to the threeDJoystick parameter's default values
      // note in this case the default value is a Vector3, filled by three floats
      threeDJoystickSetting.defaultValue = new Vector3(
        threeDJoystickParam.defaultXValue,
        threeDJoystickParam.defaultYValue,
        threeDJoystickParam.defaultZValue
      );

      // set the minimum set of values for the threeDJoystick parameter
      threeDJoystickSetting.rangeMin = new Vector3(
        threeDJoystickParam.minXValue,
        threeDJoystickParam.minYValue,
        threeDJoystickParam.minZValue
      );

      // set the maximum set of values for the threeDJoystick parameter
      threeDJoystickSetting.rangeMax = new Vector3(
        threeDJoystickParam.maxXValue,
        threeDJoystickParam.maxYValue,
        threeDJoystickParam.maxZValue
      );

      // put the CVRAdvancesAvatarSettingThreeDJoystick into the CVRAdvancedSettingsEntry's value
      threeDJoystickEntry.setting = threeDJoystickSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(threeDJoystickEntry);
    }
  }
}
// #endif
