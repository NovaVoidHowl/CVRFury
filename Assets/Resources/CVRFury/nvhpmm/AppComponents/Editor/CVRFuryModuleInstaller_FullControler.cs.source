// { "version": "0.0.32" , "canInstall": true , "optional": true , "defineSymbolSuffix": "_MI_FC", dependencies: []}
// #if UNITY_EDITOR && CVR_CCK_EXISTS

using Math = System.Math;
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEngine.SceneManagement;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Scripts.Editor;
using ABI.CCK.Scripts;
using ABI.CCK.Components;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;

/// <summary>
/// fullController Module
/// this is handles avatar controller/config (menus, animators etc.) just before upload/play
/// </summary>

namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  public class fullControllerModuleProcessor : IModuleProcessor
  {
    public void ProcessModule(CVRFuryModule module, GameObject targetAvatar)
    {
      // Implementation for fullControllerModuleProcessor
      // console print to say this function is being called
      CoreLog("fullControllerModuleProcessor.ProcessModule() called");

      // log the module's moduleType to the console
      CoreLog("module.ModuleType: " + module.ModuleType);

      // access the CVRAvatar component on the targetAvatar
      CVRAvatar avatar = targetAvatar.GetComponent<CVRAvatar>();

      // check if the avatar exists
      if (avatar != null)
      {

        // get the avatarSettings from the avatar
        CVRAdvancedAvatarSettings advancedAvatarSettings = avatar.avatarSettings;

        // get the list of menu stores from the avatarSettings (settings public variable)
        List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList = advancedAvatarSettings.settings;


        // section to handle CVR Fury Controllers
        // check and see if the module has any controllers
        if ((module as fullControllerModule).controllers.Count > 0)
        {
          // loop through the controllers in the module
          foreach (RuntimeAnimatorController controller in (module as fullControllerModule).controllers)
          {
            // log the controller's name to the console
            CoreLog("controller.name: " + controller.name);

            // TODO
          }
        }

        // section to handle CVR Fury Menu Store
        // check and see if the module has any menus
        if ((module as fullControllerModule).menus.Count > 0)
        {
          // loop through the menus in the module
          foreach (fullControllerModule.MenuEntry menuEntry in (module as fullControllerModule).menus)
          {
            // log the menu's name to the console
            CoreLog("menuEntry.menu.name: " + menuEntry.menu.name);

            // get the menu's prefix
            string prefix = menuEntry.prefix;

            // if the prefix is not null or empty add a forward slash to the end
            if (!string.IsNullOrEmpty(prefix))
            {
              prefix += "/";
            }

            if (!menuEntry.forcePrefixStringFormat)
            {
              // force all backslashes to forward slashes in the prefix
              // this is to ensure that the menu structure is correctly formatted
              // for DakyModsCVR's ActionMenu mod (if the user has it installed)
              // ref https://github.com/dakyneko/DakyModsCVR/tree/master/ActionMenu
              prefix = prefix.Replace("\\", "/");
            }

            // load the menu file from the menuEntry
            CVRFuryMenuStore menu = menuEntry.menu;

            // check if the menu exists
            if (menu != null)
            {
              // now we can access the menu's properties
              // load the menu's menuItems
              List<menuParameter> menuItems = menu.menuItems;

              // loop through the menuItems
              foreach (menuParameter menuItem in menuItems)
              {
                // case statement to handle the different types of menu items
                switch (menuItem.MenuParameterType)
                {
                  case "toggleParameter":
                    // cast the menuItem to a toggleParameter
                    toggleParameter toggleParam = menuItem as toggleParameter;
                    // call the ProcessToggleParameter function to handle the toggle parameter
                    ProcessToggleParameter(toggleParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "dropdownParameter":
                    // cast the menuItem to a dropdownParameter
                    dropdownParameter dropdownParam = menuItem as dropdownParameter;
                    // call the ProcessDropdownParameter function to handle the dropdown parameter
                    ProcessDropdownParameter(dropdownParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "sliderParameter":
                    // cast the menuItem to a sliderParameter
                    sliderParameter sliderParam = menuItem as sliderParameter;
                    // call the ProcessSliderParameter function to handle the slider parameter
                    ProcessSliderParameter(sliderParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "twoDJoystickParameter":
                    // cast the menuItem to a twoDJoystickParameter
                    twoDJoystickParameter twoDJoystickParam = menuItem as twoDJoystickParameter;
                    // call the ProcessTwoDJoystickParameter function to handle the twoDJoystick parameter
                    ProcessTwoDJoystickParameter(twoDJoystickParam, prefix, CVRAdvancedAvatarMenuList);

                    break;

                  case "threeDJoystickParameter":
                    // cast the menuItem to a threeDJoystickParameter
                    threeDJoystickParameter threeDJoystickParam = menuItem as threeDJoystickParameter;
                    // call the ProcessThreeDJoystickParameter function to handle the threeDJoystick parameter
                    ProcessThreeDJoystickParameter(threeDJoystickParam, prefix, CVRAdvancedAvatarMenuList);

                    break;


                  default:
                    // if the menuItem is not valid, log an error to the console
                    Debug.LogError("Unknown menu item type: " + menuItem.MenuParameterType);
                    break;
                }



              }
            }

          }
        }

        // section to handel CVR Fury Parameters
        // check and see if the module has any parameters
        if ((module as fullControllerModule).parameters.Count > 0)
        {
          // loop through the parameters in the module
          foreach (fullControllerModule.ParamsEntry paramEntry in (module as fullControllerModule).parameters)
          {
            // log the parameter's name to the console
            CoreLog("paramEntry.parameters.name: " + paramEntry.parameters.name);

            // TODO

          }
        }

        // section to handle CVR Fury Smoothed Parameters
        // check and see if the module has any smoothed parameters
        if ((module as fullControllerModule).smoothedPrms.Count > 0)
        {
          // loop through the smoothed parameters in the module
          foreach (fullControllerModule.SmoothParamEntry smoothedParamEntry in (module as fullControllerModule).smoothedPrms)
          {
            // log the smoothed parameter's name to the console
            CoreLog("smoothedParamEntry.name: " + smoothedParamEntry.name);

            // TODO

          }
        }

        // section to handle CVR Fury Global Parameters
        // check and see if the module has any global parameters
        if ((module as fullControllerModule).globalParams.Count > 0)
        {
          // loop through the global parameters in the module
          foreach (string globalParam in (module as fullControllerModule).globalParams)
          {
            // log the global parameter's name to the console
            CoreLog("globalParam: " + globalParam);

            // TODO

          }
        }

        // section to handle CVR Fury Toggle Parameter
        // check and see if the module has a toggle parameter
        if (!string.IsNullOrWhiteSpace((module as fullControllerModule).toggleParam))
        {
          // log the toggle parameter's name to the console
          CoreLog("toggleParam: " + (module as fullControllerModule).toggleParam);
        }

        // section to handle CVR Fury Binding Rewrites
        // check and see if the module has any binding rewrites
        if ((module as fullControllerModule).rewriteBindings.Count > 0)
        {
          // loop through the binding rewrites in the module
          foreach (fullControllerModule.BindingRewrite rewrite in (module as fullControllerModule).rewriteBindings)
          {
            // log the binding rewrite's name to the console
            CoreLog("rewrite.from: "
                    + rewrite.from
                    + "\n rewrite.to: "
                    + rewrite.to
                    + "\n rewrite.delete: " + rewrite.delete);



          }
        }





      }
      else
      {
        // if it doesn't, log an error to the console
        Debug.LogError("Avatar does not exist");
      }

    }

//// ---------------------------------------------- supporting functions -----------------------------------------------

  // general functions

    private string formatParameterNameForMachineName(string name)
    {
      // remove any spaces from the name
      return name.Replace(" ", "");
    }

  // functions to handle CVR Fury Menu Store bits

    public void ProcessToggleParameter (toggleParameter toggleParam, string prefix, List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList)
    {
      // log the toggle parameter's name to the console
      CoreLog("toggleParam.name: " + toggleParam.name);

      // log the toggle parameter's default state to the console
      CoreLog("toggleParam.defaultState: " + toggleParam.defaultState);

      // log the toggle parameter's generate type to the console
      CoreLog("toggleParam.generateType: " + toggleParam.generateType);

      // create CVRAdvancedSettingsEntry for the toggle parameter
      CVRAdvancedSettingsEntry toggleEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.GameObjectToggle
      toggleEntry.type = CVRAdvancedSettingsEntry.SettingsType.GameObjectToggle;

      // set the CVRAdvancedSettingsEntry's name to the toggle parameter's name with the prefix
      toggleEntry.name = prefix + toggleParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the toggle parameter's name with the prefix
      toggleEntry.machineName = formatParameterNameForMachineName(prefix + toggleParam.name);

      // create a new CVRAdvancesAvatarSettingGameObjectToggle
      CVRAdvancesAvatarSettingGameObjectToggle toggleSetting = new CVRAdvancesAvatarSettingGameObjectToggle();

      // set the CVRAdvancesAvatarSettingGameObjectToggle's defaultValue to the toggle parameter's default state
      toggleSetting.defaultValue = toggleParam.defaultState;

      // set the CVRAdvancesAvatarSettingGameObjectToggle's usedType to the toggle parameter's generate type via a cast
      switch (toggleParam.generateType)
      {
        case toggleParameter.GenerateType.Bool:
          toggleSetting.usedType = CVRAdvancesAvatarSettingGameObjectToggle.ParameterType.GenerateBool;
          break;
        case toggleParameter.GenerateType.Float:
          toggleSetting.usedType = CVRAdvancesAvatarSettingGameObjectToggle.ParameterType.GenerateFloat;
          break;
        case toggleParameter.GenerateType.Int:
          toggleSetting.usedType = CVRAdvancesAvatarSettingGameObjectToggle.ParameterType.GenerateInt;
          break;
      }

      // put the CVRAdvancesAvatarSettingGameObjectToggle into the CVRAdvancedSettingsEntry's value
      toggleEntry.setting = toggleSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(toggleEntry);

    }


    public void ProcessDropdownParameter (dropdownParameter dropdownParam, string prefix, List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList)
    {
      // log the dropdown parameter's name to the console
      CoreLog("dropdownParam.name: " + dropdownParam.name);

      // create CVRAdvancedSettingsEntry for the dropdown parameter
      CVRAdvancedSettingsEntry dropdownEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.GameObjectDropdown
      dropdownEntry.type = CVRAdvancedSettingsEntry.SettingsType.GameObjectDropdown;

      // set the CVRAdvancedSettingsEntry's name to the dropdown parameter's name with the prefix
      dropdownEntry.name = prefix + dropdownParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the dropdown parameter's name with the prefix
      dropdownEntry.machineName = formatParameterNameForMachineName(prefix + dropdownParam.name);

      // create a new CVRAdvancesAvatarSettingGameObjectDropdown
      CVRAdvancesAvatarSettingGameObjectDropdown dropdownSetting = new CVRAdvancesAvatarSettingGameObjectDropdown();

      // set the CVRAdvancesAvatarSettingGameObjectDropdown's defaultValue to the dropdown parameter's default index
      dropdownSetting.defaultValue = dropdownParam.defaultIndex;

      // console print the dropdown parameter's default index
      CoreLog("dropdownParam.defaultIndex: " + dropdownParam.defaultIndex);

      // console print the dropdown parameter's generate type
      CoreLog("dropdownParam.generateType: " + dropdownParam.generateType);


      // set the CVRAdvancesAvatarSettingGameObjectDropdown's usedType to the dropdown parameter's generate type via a cast
      switch (dropdownParam.generateType)
      {
        case dropdownParameter.GenerateType.Float:
          dropdownSetting.usedType = CVRAdvancesAvatarSettingGameObjectDropdown.ParameterType.GenerateFloat;
          break;
        case dropdownParameter.GenerateType.Int:
          dropdownSetting.usedType = CVRAdvancesAvatarSettingGameObjectDropdown.ParameterType.GenerateInt;
          break;
      }

      // create a CVRAdvancedSettingsDropDownEntry list for the dropdownSetting's options
      List<CVRAdvancedSettingsDropDownEntry> dropdownOptions = new List<CVRAdvancedSettingsDropDownEntry>();

      // loop through the dropdownParam's options
      foreach (string option in dropdownParam.dropdownList)
      {
        // create a new CVRAdvancedSettingsDropDownEntry
        CVRAdvancedSettingsDropDownEntry dropdownOption = new CVRAdvancedSettingsDropDownEntry();

        // set the CVRAdvancedSettingsDropDownEntry's name to the option
        dropdownOption.name = option;

        // add the CVRAdvancedSettingsDropDownEntry to the dropdownOptions list
        dropdownOptions.Add(dropdownOption);
      }

      // set the CVRAdvancesAvatarSettingGameObjectDropdown's options to the dropdownOptions list
      dropdownSetting.options = dropdownOptions;

      // put the CVRAdvancesAvatarSettingGameObjectDropdown into the CVRAdvancedSettingsEntry's value
      dropdownEntry.setting = dropdownSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(dropdownEntry);

    }


    public void ProcessSliderParameter(sliderParameter sliderParam, string prefix, List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList)
    {
      // log the slider parameter's name to the console
      CoreLog("sliderParam.name: " + sliderParam.name);

      // create CVRAdvancedSettingsEntry for the slider parameter
      CVRAdvancedSettingsEntry sliderEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.Slider
      sliderEntry.type = CVRAdvancedSettingsEntry.SettingsType.Slider;

      // set the CVRAdvancedSettingsEntry's name to the slider parameter's name with the prefix
      sliderEntry.name = prefix + sliderParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the slider parameter's name with the prefix
      sliderEntry.machineName = formatParameterNameForMachineName(prefix + sliderParam.name);

      // create a new CVRAdvancesAvatarSettingSlider
      CVRAdvancesAvatarSettingSlider sliderSetting = new CVRAdvancesAvatarSettingSlider();

      // set the CVRAdvancesAvatarSettingSlider's defaultValue to the slider parameter's default value
      sliderSetting.defaultValue = sliderParam.defaultValue;

      // put the CVRAdvancesAvatarSettingSlider into the CVRAdvancedSettingsEntry's value
      sliderEntry.setting = sliderSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(sliderEntry);

    }

    public void ProcessTwoDJoystickParameter(twoDJoystickParameter twoDJoystickParam, string prefix, List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList)
    {
      // log the twoDJoystick parameter's name to the console
      CoreLog("twoDJoystickParam.name: " + twoDJoystickParam.name);

      // create CVRAdvancedSettingsEntry for the twoDJoystick parameter
      CVRAdvancedSettingsEntry twoDJoystickEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.Joystick2D
      twoDJoystickEntry.type = CVRAdvancedSettingsEntry.SettingsType.Joystick2D;

      // set the CVRAdvancedSettingsEntry's name to the twoDJoystick parameter's name with the prefix
      twoDJoystickEntry.name = prefix + twoDJoystickParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the twoDJoystick parameter's name with the prefix
      twoDJoystickEntry.machineName = formatParameterNameForMachineName(prefix + twoDJoystickParam.name);

      // create a new CVRAdvancesAvatarSettingJoystick2D
      CVRAdvancesAvatarSettingJoystick2D twoDJoystickSetting = new CVRAdvancesAvatarSettingJoystick2D();

      // set the CVRAdvancesAvatarSettingTwoDJoystick's defaultValue to the twoDJoystick parameter's default values
      // note in this case the default value is a Vector2, filled by two floats
      twoDJoystickSetting.defaultValue = new Vector2(twoDJoystickParam.defaultXValue, twoDJoystickParam.defaultYValue);

      // set the minimum pair of values for the twoDJoystick parameter
      twoDJoystickSetting.rangeMin = new Vector2(twoDJoystickParam.minXValue, twoDJoystickParam.minYValue);

      // set the maximum pair of values for the twoDJoystick parameter
      twoDJoystickSetting.rangeMax = new Vector2(twoDJoystickParam.maxXValue, twoDJoystickParam.maxYValue);

      // put the CVRAdvancesAvatarSettingTwoDJoystick into the CVRAdvancedSettingsEntry's value
      twoDJoystickEntry.setting = twoDJoystickSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(twoDJoystickEntry);

    }

    public void ProcessThreeDJoystickParameter(threeDJoystickParameter threeDJoystickParam, string prefix, List<CVRAdvancedSettingsEntry> CVRAdvancedAvatarMenuList)
    {
      // log the threeDJoystick parameter's name to the console
      CoreLog("threeDJoystickParam.name: " + threeDJoystickParam.name);

      // create CVRAdvancedSettingsEntry for the threeDJoystick parameter
      CVRAdvancedSettingsEntry threeDJoystickEntry = new CVRAdvancedSettingsEntry();

      // set the CVRAdvancedSettingsEntry's type to SettingsType.ThreeDJoystick
      threeDJoystickEntry.type = CVRAdvancedSettingsEntry.SettingsType.Joystick3D;

      // set the CVRAdvancedSettingsEntry's name to the threeDJoystick parameter's name with the prefix
      threeDJoystickEntry.name = prefix + threeDJoystickParam.name;

      // set the CVRAdvancedSettingsEntry's machineName to the threeDJoystick parameter's name with the prefix
      threeDJoystickEntry.machineName = formatParameterNameForMachineName(prefix + threeDJoystickParam.name);

      // create a new CVRAdvancesAvatarSettingJoystick3D
      CVRAdvancesAvatarSettingJoystick3D threeDJoystickSetting = new CVRAdvancesAvatarSettingJoystick3D();

      // set the CVRAdvancesAvatarSettingThreeDJoystick's defaultValue to the threeDJoystick parameter's default values
      // note in this case the default value is a Vector3, filled by three floats
      threeDJoystickSetting.defaultValue = new Vector3(threeDJoystickParam.defaultXValue, threeDJoystickParam.defaultYValue, threeDJoystickParam.defaultZValue);

      // set the minimum set of values for the threeDJoystick parameter
      threeDJoystickSetting.rangeMin = new Vector3(threeDJoystickParam.minXValue, threeDJoystickParam.minYValue, threeDJoystickParam.minZValue);

      // set the maximum set of values for the threeDJoystick parameter
      threeDJoystickSetting.rangeMax = new Vector3(threeDJoystickParam.maxXValue, threeDJoystickParam.maxYValue, threeDJoystickParam.maxZValue);

      // put the CVRAdvancesAvatarSettingThreeDJoystick into the CVRAdvancedSettingsEntry's value
      threeDJoystickEntry.setting = threeDJoystickSetting;

      // add the CVRAdvancedSettingsEntry to the CVRAdvancedAvatarMenuList
      CVRAdvancedAvatarMenuList.Add(threeDJoystickEntry);

    }




  }
}
// #endif
