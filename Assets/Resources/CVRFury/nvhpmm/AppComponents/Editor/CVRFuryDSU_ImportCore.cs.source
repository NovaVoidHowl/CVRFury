// { "version": "0.0.29" , "canInstall": true , "optional": false , "defineSymbolSuffix": "_COMP_DSU_IMPORT_CORE", dependencies: []}
#if UNITY_EDITOR
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Components;
using Newtonsoft.Json.Linq;
using ABI.CCK.Scripts.Editor;
using VF.Model.Feature;
using VF.Component;
using VF.Model;
using Action = VF.Model.StateAction.Action;
using VF.Model.StateAction;


/// <summary>
/// Full Controller
/// this imports/convert from VRCFury
/// </summary>


namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  public partial class CVRFuryDataStorageUnitEditor : Editor
  {
    private void importVRCFuryFeaturesViaUI()
    {

      // get the gameObject this component is attached to
      var DSUgameObject = ((CVRFuryDataStorageUnit) target).gameObject;

      // check if that gameObject has VRCFuryComponent on it
      if (DSUgameObject.GetComponent<VRCFuryComponent>() != null)
      {
        // if the gameObject has VRCFuryComponent on it, get the VRCFuryComponent
        var VRCFuryComponent = DSUgameObject.GetComponent<VRCFuryComponent>();

        // list for the feature class names
        List<Tuple<string, FeatureModel>> featureClassInstances = new List<Tuple<string, FeatureModel>>();

        VRCFury fury = VRCFuryComponent as VRCFury; // cast to VRCFury

        if (fury != null) {
          // access the config property
          VRCFuryConfig config = fury.config;

          // iterate through the features, and list the class names
          foreach (FeatureModel feature in config.features)
          {
            // add the class name and the feature to the featureClassInstances list
            featureClassInstances.Add(new Tuple<string, FeatureModel>(feature.GetType().Name, feature));
          }
        }
        else
        {
          // converted component is null
          // send a warning to the console
          Debug.LogWarning("VRCFuryComponent converted to VRCFury is null");
          return;
        }

        // at this point we have a viable list of featureClassInstances in use, on the gameObject

        // if there are no features to import, return
        if (featureClassInstances.Count == 0)
        {
          return;
        }

        // at this point we have a viable list of featureClassInstances that is not empty.
        // so all import triggers can go here

        // position in the list
        int positionInList = 0;
        // loop featureClassInstances
        foreach(Tuple<string, FeatureModel> featureClassInstance in featureClassInstances)
        {
          // get the feature class name
          string featureClassName = featureClassInstance.Item1;
          // get the feature instance
          FeatureModel featureInstance = featureClassInstance.Item2;

        //--------------------------------------------------------------------------------------------
          // process feature instance depending on type of feature
          // modular list of process functions go here
          // note the function should expect a single feature instance as an argument
          // along with the rootVisualElement (so it can update/customise the UI) and the positionInList
          // it is expected that the function will update the UI as required (rootVisualElement.MarkDirtyRepaint();)
          #if NVH_CVRFURY_EXISTS_COMP_DSU_IMPORT_AOU
          importApplyOnUploadFeature(featureClassInstance, rootVisualElement, positionInList);
          #endif




        //--------------------------------------------------------------------------------------------
          // increment position in list
          positionInList++;
        }

        updateFinaliseUI();



      }
      else
      {
        // no VRCFuryComponent on the gameObject, so no data of this type to import
      }

    }

    private void updateFinaliseUI()
    {
      // get the list of modules from this DSU
      var modules = ((CVRFuryDataStorageUnit) target).modules.modules;

      // bool to check if any modules have been imported
      bool modulesImported = false;

      // loop through the modules
      foreach (var module in modules)
      {
        // check if the module has the 'justImported' bool set to true
        if (module.justImported)
        {
          // if the module has the 'justImported' bool set to true, set modulesImported to true
          modulesImported = true;
          // break the loop, if even one module has been imported we need to act on that.
          break;
        }
      }

      // if modulesImported is true, update the UI
      // this will add a label 'button' to the UI to allow the user to finalise the import


      // get the CVRFuryDataStorageUnitDataImportDetails visual element
      var CVRFuryDataStorageUnitDataImportDetails = rootVisualElement.Q<VisualElement>("CVRFuryDataStorageUnitDataImportDetails");

      // check if there are any modules that have been imported
      if (modulesImported)
      {
        // add a label to CVRFuryDataStorageUnitDataImportDetails visual element,
        // to allow the user to finalise the import

        // create a new label
        var finaliseImportLabel = new Label("Finalise Current Imports");
        finaliseImportLabel.name = "finaliseImportLabel";

        // add the label to the CVRFuryDataStorageUnitDataImportDetails visual element
        CVRFuryDataStorageUnitDataImportDetails.Add(finaliseImportLabel);

        // add a click event to the label
        finaliseImportLabel.RegisterCallback<ClickEvent>(ev =>
        {
          // call the finaliseImport function
          finaliseModuleImport(modules);
        });

        // add class to the label, to style it
        finaliseImportLabel.AddToClassList("finaliseImportLabel");
      }
      else
      {
        // get the finaliseImportLabel
        Label finaliseImportLabel = CVRFuryDataStorageUnitDataImportDetails.Q<Label>("finaliseImportLabel");
        if (finaliseImportLabel != null)
        {
          // if there is already a finaliseImportLabel, remove it
          CVRFuryDataStorageUnitDataImportDetails.Remove(finaliseImportLabel);
        }

        // repaint the CVRFuryDataStorageUnitDataImportDetails visual element
        CVRFuryDataStorageUnitDataImportDetails.MarkDirtyRepaint();

      }
    }

    private void finaliseModuleImport(List<CVRFuryModule> modules)
    {
      // loop through the modules
      foreach (var module in modules)
      {
        // check if the module has the 'justImported' bool set to true
        if (module.justImported)
        {
          // if the module has the 'justImported' bool set to true, set it to false
          module.justImported = false;
        }
      }

      // update the UI
      updateFinaliseUI();

    }

  // end of class
  }

// end of namespace
}
#endif
