// { "version": "0.1.12" , "canInstall": true , "optional": false , "defineSymbolSuffix": "_COMP_DSU", dependencies: []}
#if UNITY_EDITOR
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Components;

namespace uk.novavoidhowl.dev.cvrfury
{
  [CustomEditor(typeof(CVRFuryDataStorageUnit))]
  public class CVRFuryDataStorageUnitEditor : Editor
  {

    // dev mode enabled
    bool devModeEnabled = false;

    // Define rootVisualElement at the class level
    VisualElement rootVisualElement;

    public override VisualElement CreateInspectorGUI()
    {
      // Create the root VisualElement
      rootVisualElement = new VisualElement();

      // set the class of the root element to allow styling
      rootVisualElement.AddToClassList("cvr-fury-inspector");

      // load base UXML
      var baseTree = Resources.Load<VisualTreeAsset>(
        Constants.PROGRAM_DISPLAY_NAME + "/CVRFuryComponents/UnityUXML/CVRFuryDataStorageUnitInspector"
      );

      // Check if the UXML file was loaded
      if (baseTree == null)
      {
        Debug.LogError(
          "Failed to load UXML file at 'UnityUXML/CVRFuryDataStorageUnitInspector'. Please ensure the file exists at the specified path."
        );
        // If the UXML file was not loaded add a new label to the root.
        rootVisualElement.Add(new Label("CRITICAL ERROR : UXML could not be loaded."));
        return rootVisualElement;
      }

      // Load and apply the stylesheet
      var stylesheet = Resources.Load<StyleSheet>(
        Constants.PROGRAM_DISPLAY_NAME + "/CVRFuryComponents/UnityStyleSheets/CVRFuryDataStorageUnitInspector"
      );

      // Check if the StyleSheet was loaded
      if (stylesheet == null)
      {
        Debug.LogError(
          "Failed to load StyleSheet at 'UnityStyleSheets/CVRFuryDataStorageUnitInspector'. Please ensure the file exists at the specified path."
        );
        // If the StyleSheet was not loaded add a new label to the root.
        rootVisualElement.Add(new Label("CRITICAL ERROR : StyleSheet could not be loaded."));
        return rootVisualElement;
      }

      // Instantiate the UXML tree
      var ToolSetup = baseTree.Instantiate();

      // Create a temporary list to hold the children
      List<VisualElement> children = new List<VisualElement>(ToolSetup.Children());

      // Add the children of the instantiated UXML to the root
      foreach (var child in children)
      {
        rootVisualElement.Add(child);
      }

      // get the logo VisualElement
      var logo = rootVisualElement.Q<VisualElement>("logo");

      // read the logo from the resources
      var logoTexture = Resources.Load<Texture2D>(Constants.PROGRAM_DISPLAY_NAME + "/Logos/CVRFuryLogo");

      // Check if the logo was loaded
      if (logoTexture == null)
      {
        Debug.LogError(
          "Failed to load logo at 'Logos/CVRFuryLogo'. Please ensure the file exists at the specified path."
        );
        // If the logo was not loaded add a new label to the root.
        logo.Add(new Label("CRITICAL ERROR : Logo could not be loaded."));
      }
      else
      {
        // If the logo was loaded set the texture
        logo.style.backgroundImage = logoTexture;
      }


      // get the gameobject this component is attached to
      var DSUgameObject = ((CVRFuryDataStorageUnit) target).gameObject;

      // get the parent of the DSUgameObject
      var DSUparent = DSUgameObject.transform.parent;

      // check if the parent is null
      if (DSUparent == null)
      {
        // if the parent is null do nothing, as the DSU object is likely in the root of the scene
      }
      else
      {
        // if the parent is not null,

        // check if the parent has a CVRAvatar component
        if (DSUparent.GetComponent<CVRAvatar>() != null)
        {
          // if the parent has a CVRAvatar component,
          // get the CVRFuryDataStorageUnitStatusAvatarLinkButton Button VisualElement
          var CVRFuryDataStorageUnitStatusAvatarLinkButton =
            rootVisualElement.Q<Button>("CVRFuryDataStorageUnitStatusAvatarLinkButton");
          // make the CVRFuryDataStorageUnitStatusAvatarLinkButton Button VisualElement visible
          CVRFuryDataStorageUnitStatusAvatarLinkButton.style.display = DisplayStyle.Flex;

          // set the button to select the gameobject the CVRAvatar component is attached to
          CVRFuryDataStorageUnitStatusAvatarLinkButton.clickable.clicked += () =>
          {
            Selection.activeGameObject = DSUparent.gameObject;
          };

          // get the CVRFuryDataStorageUnitStatusAvatarLinkContent Label VisualElement
          var CVRFuryDataStorageUnitStatusAvatarLinkContent =
            rootVisualElement.Q<Label>("CVRFuryDataStorageUnitStatusAvatarLinkContent");

          // set the text of the CVRFuryDataStorageUnitStatusAvatarLinkContent Label VisualElement to 'Active'
          CVRFuryDataStorageUnitStatusAvatarLinkContent.text = "Active";

        }

      }

      // Apply the StyleSheet
      rootVisualElement.styleSheets.Add(stylesheet);

      // subscribe to the CVRFuryDevModeEnabler component
      devModeSubscribe();
      // Call UpdateUI after creating the UI
      UpdateUI(devModeEnabled);


      return rootVisualElement;
    }


    private void OnEnable()
    {
      devModeSubscribe();
    }

    private void devModeSubscribe()
    {
      if (target is CVRFuryDataStorageUnit cvrFuryDataStorageUnit && cvrFuryDataStorageUnit.gameObject.GetComponent<CVRFuryDevModeEnabler>() != null)
      {
        var CVRFuryDevModeEnabler = cvrFuryDataStorageUnit.gameObject.GetComponent<CVRFuryDevModeEnabler>();
        CVRFuryDevModeEnabler.OnDevModeChanged.AddListener(UpdateUI);
        devModeEnabled = CVRFuryDevModeEnabler.DevModeEnabled;
      }
    }

    private void OnDisable()
    {
      if (target is CVRFuryDataStorageUnit cvrFuryDataStorageUnit && cvrFuryDataStorageUnit.gameObject.GetComponent<CVRFuryDevModeEnabler>() != null)
      {
        var CVRFuryDevModeEnabler = cvrFuryDataStorageUnit.gameObject.GetComponent<CVRFuryDevModeEnabler>();
        CVRFuryDevModeEnabler.OnDevModeChanged.RemoveListener(UpdateUI);
      }
    }

    void UpdateUI(bool newValue)
    {
      devModeEnabled = newValue;

      if (rootVisualElement == null)
      {
        // if the rootVisualElement is null, return
        return;
      }

      if (devModeEnabled)
      {

        // load the devMode uss from resources
        var devModeStyleSheet = Resources.Load<StyleSheet>(
          Constants.PROGRAM_DISPLAY_NAME + "/DevMode/UnityStyleSheets/CVRFuryDataStorageUnitInspector-Dev"
        );

        // check if there is already a devModeTag VisualElement
        var devModeTagVisualElementExists = rootVisualElement.Q<VisualElement>("devModeTag");

        // if there is not already a devModeTag VisualElement
        if (devModeTagVisualElementExists == null)
        {
          // apply the devModeStyleSheet to the rootVisualElement
          rootVisualElement.styleSheets.Add(devModeStyleSheet);

          // create a new VisualElement
          var devModeTagVisualElement = new VisualElement();

          // set the name of the devModeTagVisualElement to allow styling
          devModeTagVisualElement.name = "devModeTag";


          // add the devModeTagVisualElement to the rootVisualElement
          rootVisualElement.Add(devModeTagVisualElement);

          // set the text of the devModeTagVisualElement to 'Dev Mode Enabled'
          devModeTagVisualElement.Add(new Label("Dev Mode Enabled"));
        }

        // check if there is already a defaultEditorContainer VisualElement
        var defaultEditorContainerExists = rootVisualElement.Q<VisualElement>("defaultEditorContainer");

        // if there is not already a defaultEditorContainer VisualElement
        if (defaultEditorContainerExists == null)
        {
          // create a new VisualElement
          var defaultEditorContainer = new VisualElement();

          // set the name of the defaultEditorContainer to allow styling
          defaultEditorContainer.name = "defaultEditorContainer";

          // add the defaultEditorContainer to the rootVisualElement
          rootVisualElement.Add(defaultEditorContainer);

          // show the default editor in an IMGUI container
          var defaultEditor = CreateEditor(target);
          var defaultEditorIMGUIContainer = new IMGUIContainer(() =>
          {
            defaultEditor.OnInspectorGUI();
          });
          defaultEditorContainer.Add(defaultEditorIMGUIContainer);

          // add container for moduleAdder
          var moduleAdderContainer = new VisualElement();
          moduleAdderContainer.name = "moduleAdderContainer";
          defaultEditorContainer.Add(moduleAdderContainer);

          // add dropdown for moduleAdder types list
          var moduleAdderTypeDropdown = new PopupField<string>("Module Type", new List<string>(){"parametersLink", "menuLink"}, 0);
          moduleAdderTypeDropdown.name = "moduleAdderTypeDropdown";
          moduleAdderContainer.Add(moduleAdderTypeDropdown);

          // add button for moduleAdder
          var moduleAdderButton = new Button(() =>
          {
            var moduleAdderType = moduleAdderTypeDropdown.value;
            switch (moduleAdderType)
            {
              case "parametersLink":
                var newParametersLink = new parametersLink();
                ((CVRFuryDataStorageUnit) target).modules.modules.Add(newParametersLink);
                break;
              case "menuLink":
                var newMenuLink = new menuLink();
                ((CVRFuryDataStorageUnit) target).modules.modules.Add(newMenuLink);
                break;
            }
            UpdateUI(devModeEnabled);
          });
          moduleAdderButton.name = "moduleAdderButton";
          moduleAdderButton.text = "Add Module";
          moduleAdderContainer.Add(moduleAdderButton);


        }
      }
      else
      {
        // devmode not enabled so do a cleanup of the devmode elements

        // find and remove all instances of the devModeTagVisualElement
        var devModeTagVisualElements = rootVisualElement.Query<VisualElement>("devModeTag").ToList();
        foreach (var devModeTagVisualElement in devModeTagVisualElements)
        {
          rootVisualElement.Remove(devModeTagVisualElement);
        }

        // find and remove all instances of the defaultEditorContainer
        var defaultEditorContainers = rootVisualElement.Query<VisualElement>("defaultEditorContainer").ToList();
        foreach (var defaultEditorContainer in defaultEditorContainers)
        {
          rootVisualElement.Remove(defaultEditorContainer);
        }
      }
      Repaint();
    }


  }
}
#endif
