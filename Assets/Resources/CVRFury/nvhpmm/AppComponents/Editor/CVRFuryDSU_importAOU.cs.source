// { "version": "0.9.1" , "canInstall": true , "optional": true , "defineSymbolSuffix": "_COMP_DSU_IMPORT_AOU", dependencies: []}
#if UNITY_EDITOR
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Components;
using Newtonsoft.Json.Linq;
using ABI.CCK.Scripts.Editor;
using VF.Model.Feature;
using VF.Component;
using VF.Model;
using Action = VF.Model.StateAction.Action;
using VF.Model.StateAction;


// This is going to be BIG, as there are lot of different types of actions
// see StateAction.cs in the stubs folder for the full list of actions
//
// sofar working on ObjectToggleAction, as this is the most common action
//
// Things to look out for:
// - you can have multiple actions of the same type -- think this is fixed now based on the purge and re-add logic
// - you can mix and match actions of different types in one block

namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  public partial class CVRFuryDataStorageUnitEditor : Editor
  {
    private void importApplyOnUploadFeature()
    {

      // get the gameObject this component is attached to
      var DSUgameObject = ((CVRFuryDataStorageUnit) target).gameObject;

      // check if that gameObject has VRCFuryComponent on it
      if (DSUgameObject.GetComponent<VRCFuryComponent>() != null)
      {
        // if the gameObject has VRCFuryComponent on it, get the VRCFuryComponent
        var VRCFuryComponent = DSUgameObject.GetComponent<VRCFuryComponent>();

        // list for the feature class names
        List<Tuple<string, FeatureModel>> featureClassNames = new List<Tuple<string, FeatureModel>>();

        VRCFury fury = VRCFuryComponent as VRCFury; // cast to VRCFury

        if (fury != null) {
          // access the config property
          VRCFuryConfig config = fury.config;

          // iterate through the features, and list the class names
          foreach (FeatureModel feature in config.features)
          {
            // add the class name and the feature to the featureClassNames list
            featureClassNames.Add(new Tuple<string, FeatureModel>(feature.GetType().Name, feature));
          }
        }
        else
        {
          // converted component is null
          // send a warning to the console
          Debug.LogWarning("VRCFuryComponent converted to VRCFury is null");
        }



        // if the featureClassNames list contains the ApplyDuringUpload feature
        if (featureClassNames.Any(tuple => tuple.Item1 == "ApplyDuringUpload"))
        {
          // get the tuple that contains the ApplyDuringUpload feature
          var applyDuringUploadTuple = featureClassNames.First(tuple => tuple.Item1 == "ApplyDuringUpload");

          // get the ApplyDuringUpload feature from the tuple
          FeatureModel applyDuringUploadFeature = applyDuringUploadTuple.Item2;

          // get the CVRFuryDataStorageUnitDataImportDetailsFeaturesList visualElement
          var CVRFuryDataStorageUnitDataImportDetailsFeaturesList =
            rootVisualElement.Q<VisualElement>("CVRFuryDataStorageUnitDataImportDetailsFeaturesList");

          // get the ApplyDuringUpload featureClassNameLabel Label VisualElement from the CVRFuryDataStorageUnitDataImportDetailsFeaturesList VisualElement
          var featureClassNameLabel =
            CVRFuryDataStorageUnitDataImportDetailsFeaturesList.Q<Label>("ApplyDuringUpload");

          // add a white border to the featureClassNameLabel Label VisualElement
          featureClassNameLabel.AddToClassList("featureClassNameLabelBorderWhite");

          featureClassNameLabel.RegisterCallback<ClickEvent>(evt =>
          {
            // effectively this label is now a button, user can click to trigger the import

            // // print the content of applyDuringUploadFeature to console
            // CoreLog(applyDuringUploadFeature);

            // State is in VRCFury stub, line 130

            // cast applyDuringUploadFeature to ApplyDuringUpload and access the action property
            ApplyDuringUpload applyDuringUpload = applyDuringUploadFeature as ApplyDuringUpload;
            if (applyDuringUpload != null)
            {
              // cast applyDuringUpload.action to State and access the actions list property
              State state = applyDuringUpload.action as State;


              // get the list of modules from this DSU
              var modules = ((CVRFuryDataStorageUnit) target).modules.modules;


              ////// debug outputs to console
              // // print the number of modules in the modules list to console
              // CoreLog("number of DSU modules = " + modules.Count);
              //
              // // print the number of actions in the actions list to console
              // CoreLog("number of actions = " + state.actions.Count);

              // iterate through the actions list and print the type of each action to console
              foreach (Action action in state.actions)
              {
                switch (action)
                {
                  ////////--------------------------------------------------------------------------------------------
                  // Case to handle objectToggleAction data import
                  // Note: This is the most common action type seen so far as of 2021-10-13
                  // related files: StateAction.cs - line 18 to 44

                  case ObjectToggleAction objectToggleAction:

                    //// TODO: remove this debug code before release
                    // debug outputs to console
                    // CoreLog(objectToggleAction.GetType());
                    // CoreLog(objectToggleAction.obj);
                    // CoreLog(objectToggleAction.mode);

                    // check to see if the DSU already has an objectStateSetter module
                    if (modules.Any(module => module.GetType().Name == "objectStateSetter"))
                    {

                      List<CVRFuryModule> modulesToRemove = new List<CVRFuryModule>();

                      // check all the modules of that type to see if they have the 'importedFromVRCFury' bool set
                      // to true and 'justImported' bool is not set to true, if any are found, add them to the remove list
                      foreach (var module in modules.Where(module => module.GetType().Name == "objectStateSetter"))
                      {
                        var objectStateSetterModuleInstance = module as objectStateSetter;
                        if (objectStateSetterModuleInstance.importedFromVRCFury && !objectStateSetterModuleInstance.justImported)
                        {
                          modulesToRemove.Add(module);
                        }
                      }

                      // process the remove list
                      foreach (var module in modulesToRemove)
                      {
                        modules.Remove(module);
                      }
                    }

                    // ok so now we can be sure we only have stuff the user added after the fact
                    // (don't want to remove user added data)

                    // now we can add the new data
                    objectStateSetter objectStateSetter = new objectStateSetter();

                    // update the module's version info
                    objectStateSetter.CVRFuryVersion = ParseCVRFuryVersion();
                    objectStateSetter.unityVersion = ParseUnityVersion(Application.unityVersion);
                    objectStateSetter.CVRCCKVersion = ParseCCKVersion();

                    // create a new objectStatePair
                    objectStatePair newObjectStatePair = new objectStatePair();

                    // set the objectToSetStateOn property of the new objectStatePair to the obj gameObject from the action
                    newObjectStatePair.objectToSetStateOn = objectToggleAction.obj;

                    // set the stateToSet property of the new objectStatePair to the mode of the action
                    newObjectStatePair.stateToSet = objectToggleAction.mode == ObjectToggleAction.Mode.TurnOn ? objectStatePair.objectState.enabled : objectStatePair.objectState.disabled;

                    // add the new objectStatePair to the objectStatePairs array in the objectStateSetter module
                    objectStateSetter.objectStatePairs = new objectStatePair[] { newObjectStatePair };

                    // set the importedFromVRCFury bool, and the justImported bool to true
                    objectStateSetter.importedFromVRCFury = true;
                    objectStateSetter.justImported = true;

                    // add the objectStateSetter module to the modules list in the DSU
                    modules.Add(objectStateSetter);

                    break;

                  //// case to handle MaterialAction data import
                  // related files: StateAction.cs - 55 to 61
                  case MaterialAction materialAction:
                    // debug outputs to console
                    // CoreLog(materialAction.GetType());
                    // CoreLog(materialAction.obj);
                    // CoreLog(materialAction.materialIndex);
                    // CoreLog(materialAction.mat);

                    // check to see if the DSU already has an objectDefaultMaterialSetter module
                    if (modules.Any(module => module.GetType().Name == "objectDefaultMaterialSetter"))
                    {

                      List<CVRFuryModule> modulesToRemove = new List<CVRFuryModule>();

                      // check all the modules of that type to see if they have the 'importedFromVRCFury' bool set
                      // to true and 'justImported' bool is not set to true, if any are found, add them to the remove list
                      foreach (var module in modules.Where(module => module.GetType().Name == "objectDefaultMaterialSetter"))
                      {
                        var objectDefaultMaterialSetterModuleInstance = module as objectDefaultMaterialSetter;
                        if (objectDefaultMaterialSetterModuleInstance.importedFromVRCFury && !objectDefaultMaterialSetterModuleInstance.justImported)
                        {
                          modulesToRemove.Add(module);
                        }
                      }

                      // process the remove list
                      foreach (var module in modulesToRemove)
                      {
                        modules.Remove(module);
                      }
                    }

                    // ok so now we can be sure we only have stuff the user added after the fact
                    // (don't want to remove user added data)

                    // now we can add the new data

                    // get the materialAction renderer
                    Renderer renderer = materialAction.obj.GetComponent<Renderer>();
                    // get the renderer index
                    int rendererIndex = materialAction.materialIndex;
                    // get the material
                    Material material = materialAction.mat.objRef as Material;

                    // create a new objectDefaultMaterialSetter module
                    objectDefaultMaterialSetter objectDefaultMaterialSetter = new objectDefaultMaterialSetter();

                    // update the module's version info
                    objectDefaultMaterialSetter.CVRFuryVersion = ParseCVRFuryVersion();
                    objectDefaultMaterialSetter.unityVersion = ParseUnityVersion(Application.unityVersion);
                    objectDefaultMaterialSetter.CVRCCKVersion = ParseCCKVersion();

                    // set the defaultMaterial property of the objectDefaultMaterialSetter module to the material from the action
                    objectDefaultMaterialSetter.defaultMaterial = material;

                    // set the renderer property of the objectDefaultMaterialSetter module to the renderer from the action
                    objectDefaultMaterialSetter.renderer = renderer;

                    // set the rendererIndex property of the objectDefaultMaterialSetter module to the rendererIndex from the action
                    objectDefaultMaterialSetter.rendererIndex = rendererIndex;

                    // set the importedFromVRCFury bool, and the justImported bool to true
                    objectDefaultMaterialSetter.importedFromVRCFury = true;
                    objectDefaultMaterialSetter.justImported = true;

                    // add the objectDefaultMaterialSetter module to the modules list in the DSU
                    modules.Add(objectDefaultMaterialSetter);

                    break;

                  //// case to handle BlendShapeAction data import
                  // related files: StateAction.cs - 46 to 53
                  case BlendShapeAction blendShapeAction:
                    // debug outputs to console
                    // CoreLog(blendShapeAction.GetType());
                    // CoreLog(blendShapeAction.blendShape);
                    // CoreLog(blendShapeAction.blendShapeValue);
                    // CoreLog(blendShapeAction.renderer);
                    // CoreLog(blendShapeAction.allRenderers);

                    // check to see if the DSU already has an objectDefaultBlendShapeSetter module
                    if (modules.Any(module => module.GetType().Name == "objectDefaultBlendShapeSetter"))
                    {

                      List<CVRFuryModule> modulesToRemove = new List<CVRFuryModule>();

                      // check all the modules of that type to see if they have the 'importedFromVRCFury' bool set
                      // to true and 'justImported' bool is not set to true, if any are found, add them to the remove list
                      foreach (var module in modules.Where(module => module.GetType().Name == "objectDefaultBlendShapeSetter"))
                      {
                        var objectDefaultBlendShapeSetterModuleInstance = module as objectDefaultBlendShapeSetter;
                        if (objectDefaultBlendShapeSetterModuleInstance.importedFromVRCFury && !objectDefaultBlendShapeSetterModuleInstance.justImported)
                        {
                          modulesToRemove.Add(module);
                        }
                      }

                      // process the remove list
                      foreach (var module in modulesToRemove)
                      {
                        modules.Remove(module);
                      }
                    }

                    // ok so now we can be sure we only have stuff the user added after the fact
                    // (don't want to remove user added data)

                    // now we can add the new data

                    // get the blendShapeAction renderer
                    Renderer blendShapeRenderer = blendShapeAction.renderer;

                    // get the blendShapeAction blendShape
                    string blendShape = blendShapeAction.blendShape;

                    // get the blendShapeAction blendShapeValue
                    float blendShapeValue = blendShapeAction.blendShapeValue;

                    // get the blendShapeAction allRenderers
                    bool allRenderers = blendShapeAction.allRenderers;

                    // create a new objectDefaultBlendShapeSetter module
                    objectDefaultBlendShapeSetter objectDefaultBlendShapeSetter = new objectDefaultBlendShapeSetter();

                    // update the module's version info
                    objectDefaultBlendShapeSetter.CVRFuryVersion = ParseCVRFuryVersion();
                    objectDefaultBlendShapeSetter.unityVersion = ParseUnityVersion(Application.unityVersion);
                    objectDefaultBlendShapeSetter.CVRCCKVersion = ParseCCKVersion();

                    // set the blendShape property of the objectDefaultBlendShapeSetter module to the blendShape from the action
                    objectDefaultBlendShapeSetter.blendShape = blendShape;

                    // set the blendShapeValue property of the objectDefaultBlendShapeSetter module to the blendShapeValue from the action
                    objectDefaultBlendShapeSetter.blendShapeValue = blendShapeValue;

                    // set the renderer property of the objectDefaultBlendShapeSetter module to the blendShapeRenderer from the action
                    objectDefaultBlendShapeSetter.renderer = blendShapeRenderer;

                    // set the allRenderers property of the objectDefaultBlendShapeSetter module to the allRenderers from the action
                    objectDefaultBlendShapeSetter.allRenderers = allRenderers;

                    // set the importedFromVRCFury bool, and the justImported bool to true
                    objectDefaultBlendShapeSetter.importedFromVRCFury = true;
                    objectDefaultBlendShapeSetter.justImported = true;

                    // add the objectDefaultBlendShapeSetter module to the modules list in the DSU
                    modules.Add(objectDefaultBlendShapeSetter);

                    break;

                  //// case to handle SpsOnAction data import
                  /// related files: StateAction.cs - 63 to 67
                  // this is one of the explicitly unsupported action types
                  // send a warning to the console about it
                  case SpsOnAction spsOnAction:
                    // message to send to the console, informing the user that this action type is not yet supported
                    string message = "The action type " + spsOnAction.GetType() + " is not supported";

                    break;

                  //// case to handle FxFloatAction data import
                  /// related files: StateAction.cs - 69 to 74
                  case FxFloatAction fxFloatAction:
                    // debug outputs to console
                    // CoreLog(fxFloatAction.GetType());
                    // CoreLog(fxFloatAction.name);
                    // CoreLog(fxFloatAction.value);
                    // check to see if the DSU already has an objectFxFloatSetter module
                    if (modules.Any(module => module.GetType().Name == "objectFxFloatSetter"))
                    {

                      List<CVRFuryModule> modulesToRemove = new List<CVRFuryModule>();

                      // check all the modules of that type to see if they have the 'importedFromVRCFury' bool set
                      // to true and 'justImported' bool is not set to true, if any are found, add them to the remove list
                      foreach (var module in modules.Where(module => module.GetType().Name == "objectFxFloatSetter"))
                      {
                        var objectFxFloatSetterModuleInstance = module as objectFxFloatSetter;
                        if (objectFxFloatSetterModuleInstance.importedFromVRCFury && !objectFxFloatSetterModuleInstance.justImported)
                        {
                          modulesToRemove.Add(module);
                        }
                      }

                      // process the remove list
                      foreach (var module in modulesToRemove)
                      {
                        modules.Remove(module);
                      }
                    }

                    // ok so now we can be sure we only have stuff the user added after the fact
                    // (don't want to remove user added data)

                    // now we can add the new data

                    // create a new objectFxFloatSetter module
                    objectFxFloatSetter objectFxFloatSetter = new objectFxFloatSetter();

                    // update the module's version info
                    objectFxFloatSetter.CVRFuryVersion = ParseCVRFuryVersion();
                    objectFxFloatSetter.unityVersion = ParseUnityVersion(Application.unityVersion);
                    objectFxFloatSetter.CVRCCKVersion = ParseCCKVersion();

                    // set the fxName property of the objectFxFloatSetter module to the name from the action
                    objectFxFloatSetter.fxFloatName = fxFloatAction.name;

                    // set the fxValue property of the objectFxFloatSetter module to the value from the action
                    objectFxFloatSetter.fxFloatValue = fxFloatAction.value;

                    // set the importedFromVRCFury bool, and the justImported bool to true
                    objectFxFloatSetter.importedFromVRCFury = true;
                    objectFxFloatSetter.justImported = true;

                    // add the objectFxFloatSetter module to the modules list in the DSU
                    modules.Add(objectFxFloatSetter);

                    break;

                  //// case to handle ScaleAction data import
                  /// related files: StateAction.cs - 138 to 143
                  //
                  case ScaleAction scaleAction:
                    // debug outputs to console
                    // CoreLog(scaleAction.GetType());
                    // CoreLog(scaleAction.obj);
                    // CoreLog(scaleAction.scale);

                    // check to see if the DSU already has an objectScaleSetter module
                    if (modules.Any(module => module.GetType().Name == "objectScaleSetter"))
                    {

                      List<CVRFuryModule> modulesToRemove = new List<CVRFuryModule>();

                      // check all the modules of that type to see if they have the 'importedFromVRCFury' bool set
                      // to true and 'justImported' bool is not set to true, if any are found, add them to the remove list
                      foreach (var module in modules.Where(module => module.GetType().Name == "objectScaleSetter"))
                      {
                        var objectScaleSetterModuleInstance = module as objectScaleSetter;
                        if (objectScaleSetterModuleInstance.importedFromVRCFury && !objectScaleSetterModuleInstance.justImported)
                        {
                          modulesToRemove.Add(module);
                        }
                      }

                      // process the remove list
                      foreach (var module in modulesToRemove)
                      {
                        modules.Remove(module);
                      }
                    }
                    // ok so now we can be sure we only have stuff the user added after the fact
                    // (don't want to remove user added data)

                    // now we can add the new data

                    // create a new objectScaleSetter module
                    objectScaleSetter objectScaleSetter = new objectScaleSetter();

                    // update the module's version info
                    objectScaleSetter.CVRFuryVersion = ParseCVRFuryVersion();
                    objectScaleSetter.unityVersion = ParseUnityVersion(Application.unityVersion);
                    objectScaleSetter.CVRCCKVersion = ParseCCKVersion();

                    // set the objectToSetScaleOn property of the objectScaleSetter module to the obj from the action
                    objectScaleSetter.objectToSetScaleOn = scaleAction.obj;

                    // set the scaleToBeSet property of the objectScaleSetter module to the scale from the action
                    objectScaleSetter.scaleToBeSet = scaleAction.scale;

                    // set the importedFromVRCFury bool, and the justImported bool to true
                    objectScaleSetter.importedFromVRCFury = true;
                    objectScaleSetter.justImported = true;

                    // add the objectScaleSetter module to the modules list in the DSU
                    modules.Add(objectScaleSetter);

                    break;

                  //// case to handle BlockBlinkingAction data import
                  /// related files: StateAction.cs - 145 to 146
                  //
                  case BlockBlinkingAction blockBlinkingAction:
                    // debug outputs to console
                    // CoreLog(blockBlinkingAction.GetType());

                    // check to see if the DSU already has an blockBlinkSetter module
                    if (modules.Any(module => module.GetType().Name == "blockBlinkSetter"))
                    {

                      List<CVRFuryModule> modulesToRemove = new List<CVRFuryModule>();

                      // check all the modules of that type to see if they have the 'importedFromVRCFury' bool set
                      // to true and 'justImported' bool is not set to true, if any are found, add them to the remove list
                      foreach (var module in modules.Where(module => module.GetType().Name == "blockBlinkSetter"))
                      {
                        var blockBlinkSetterModuleInstance = module as blockBlinkSetter;
                        if (blockBlinkSetterModuleInstance.importedFromVRCFury && !blockBlinkSetterModuleInstance.justImported)
                        {
                          modulesToRemove.Add(module);
                        }
                      }

                      // process the remove list
                      foreach (var module in modulesToRemove)
                      {
                        modules.Remove(module);
                      }
                    }
                    // ok so now we can be sure we only have stuff the user added after the fact
                    // (don't want to remove user added data)

                    // now we can add the new data

                    // create a new blockBlinkSetter module
                    blockBlinkSetter blockBlinkSetter = new blockBlinkSetter();

                    // update the module's version info
                    blockBlinkSetter.CVRFuryVersion = ParseCVRFuryVersion();
                    blockBlinkSetter.unityVersion = ParseUnityVersion(Application.unityVersion);
                    blockBlinkSetter.CVRCCKVersion = ParseCCKVersion();

                    // set the blockBlink property of the blockBlinkSetter module to the blockBlink from the action
                    blockBlinkSetter.blockBlink = true;

                    // set the importedFromVRCFury bool, and the justImported bool to true
                    blockBlinkSetter.importedFromVRCFury = true;
                    blockBlinkSetter.justImported = true;

                    // add the blockBlinkSetter module to the modules list in the DSU
                    modules.Add(blockBlinkSetter);

                    break;

                  //// case to handle BlockVisemesAction data import
                  /// related files: StateAction.cs - 148 to 149
                  //
                  case BlockVisemesAction blockVisemesAction:
                    // debug outputs to console
                    // CoreLog(blockVisemesAction.GetType());

                    // check to see if the DSU already has an blockVisemesSetter module
                    if (modules.Any(module => module.GetType().Name == "blockVisemesSetter"))
                    {

                      List<CVRFuryModule> modulesToRemove = new List<CVRFuryModule>();

                      // check all the modules of that type to see if they have the 'importedFromVRCFury' bool set
                      // to true and 'justImported' bool is not set to true, if any are found, add them to the remove list
                      foreach (var module in modules.Where(module => module.GetType().Name == "blockVisemesSetter"))
                      {
                        var blockVisemesSetterModuleInstance = module as blockVisemesSetter;
                        if (blockVisemesSetterModuleInstance.importedFromVRCFury && !blockVisemesSetterModuleInstance.justImported)
                        {
                          modulesToRemove.Add(module);
                        }
                      }

                      // process the remove list
                      foreach (var module in modulesToRemove)
                      {
                        modules.Remove(module);
                      }
                    }
                    // ok so now we can be sure we only have stuff the user added after the fact
                    // (don't want to remove user added data)

                    // now we can add the new data

                    // create a new blockVisemesSetter module
                    blockVisemesSetter blockVisemesSetter = new blockVisemesSetter();

                    // update the module's version info
                    blockVisemesSetter.CVRFuryVersion = ParseCVRFuryVersion();
                    blockVisemesSetter.unityVersion = ParseUnityVersion(Application.unityVersion);
                    blockVisemesSetter.CVRCCKVersion = ParseCCKVersion();

                    // set the blockVisemes property of the blockVisemesSetter module to the blockVisemes from the action
                    blockVisemesSetter.blockVisemes = true;

                    // set the importedFromVRCFury bool, and the justImported bool to true
                    blockVisemesSetter.importedFromVRCFury = true;
                    blockVisemesSetter.justImported = true;

                    // add the blockVisemesSetter module to the modules list in the DSU
                    modules.Add(blockVisemesSetter);

                    break;

                  // more cases to be added here
                  //
                  // case AnotherActionType anotherAction:
                  //     // Handle anotherAction here
                  //     break;

                  default:
                    // Handle unknown action types

                    // get the type of the action
                    Type actionType = action.GetType();

                    // pop up a dialog box to inform the user that this action type is not yet supported
                    EditorUtility.DisplayDialog("Unsupported Action type Detected",
                                                "The action type " + actionType + " is not yet supported",
                                                "OK");
                    break;
                }

                CoreLog(action.GetType());
              }

              //// Import finalisation section, for  ----------------------------
              // all modules now processed so we can set the 'justImported' bool to false so we can remove any old data
              // on the next import

              // iterate through the modules list, and set the 'justImported' bool to false
              foreach (var module in modules)
              {
                switch (module)
                {
                  case objectStateSetter objectStateSetter:
                    objectStateSetter.justImported = false;
                    break;
                  case objectDefaultMaterialSetter objectDefaultMaterialSetter:
                    objectDefaultMaterialSetter.justImported = false;
                    break;
                }
              }




              CoreLog(applyDuringUpload.action);
            }

          });
        }
        else
        {
          // if the featureClassNames list does not contain the ApplyDuringUpload feature,
          // no data to copy over
        }
      }
      else
      {
        // no VRCFuryComponent on the gameObject, so no data of this type to import
      }

    }
  }
}
#endif
