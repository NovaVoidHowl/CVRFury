// { "version": "0.14.4" , "canInstall": true , "optional": false , "defineSymbolSuffix": "_MI_CORE", dependencies: ["_MI_CORE_UI"]}
// #if UNITY_EDITOR && CVR_CCK_EXISTS

using Math = System.Math;
using System.Collections;
using System.Collections.Generic;
using System;
using System.IO;
using System.Threading.Tasks;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEngine.SceneManagement;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Scripts.Editor;
using ABI.CCK.Components;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;
using uk.novavoidhowl.dev.cvrfury.packagecore;

namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  public interface IModuleProcessor
  {
    void ProcessModule(CVRFuryModule module, GameObject targetAvatar);
  }

  public partial class CVRFuryModuleInstaller
  {

    //// Standard functions --------------------------------------------------------------------------------------------
    private static string InstallModeString (int mode) {
      string baseString = "CVRFury Module Installer - ";
      if (mode == 0) return baseString + "Play Mode";
      else if (mode == 1) return baseString + "Build Mode";
      else return baseString + "Unknown Mode";
    }


    public static void HandleModule(CVRFuryModule module, GameObject uploadedObject)
    {
        IModuleProcessor processor = null;
        // case statement to process the module based on its type
        switch (module)
        {
            #if NVH_CVRFURY_EXISTS_MI_AOU
            case objectStateSetter:
                processor = new objectStateSetterProcessor();
                break;
            case objectDefaultMaterialSetter:
                processor = new objectDefaultMaterialSetterProcessor();
                break;

            case blockBlinkSetter:
                processor = new blockBlinkSetterProcessor();
                break;

            case blockVisemesSetter:
                processor = new blockVisemesSetterProcessor();
                break;

            case deleteOnUpload:
                processor = new deleteOnUploadProcessor();
                break;

            case showInFirstPerson:
                processor = new showInFirstPersonProcessor();
                break;
            #endif
            #if NVH_CVRFURY_EXISTS_MI_FC
            case fullControllerModule:
                processor = new fullControllerModuleProcessor();
                break;
            #endif

            default:
                // console print to say that the module type is not recognised
                CoreLog("Module type not recognised");
                break;
        }

        if (processor != null)
        {
            processor.ProcessModule(module, uploadedObject);
        }

        // console print to say that the module has been processed
        CoreLog("Module " + module.name + " processed");
    }

    /// <summary>
    /// Install CVRFury Modules on a given GameObject, Async for play mode
    /// Mode 0 = Play Mode
    /// Mode 1 = Build Mode
    /// </summary>
    /// <param name="uploadedObject"></param>
    /// <param name="mode"></param>
    public static void InstallCVRFuryModules(GameObject uploadedObject, int mode = 0)
    {
      // trap for play mode, this method should not be called in play mode
      if (mode == 0)
      {
        CoreLogCritical("InstallCVRFuryModules called in play mode");
        return;
      }

      // Initialize the overlay unity progress bar
      float progress = 0;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "Initializing...", progress, 500);

      // popup title depending on mode, suffixing with " - Play Mode" or " - Build Mode"
      string popupTitle = InstallModeString(mode);

      progress = 0.1f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "getting uploadObject", progress, 500);

      // Implementation
      string path = GetGameObjectPath(uploadedObject);
      progress = 0.4f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "Target for CVRFury Modules is \n\n" + path, progress, 2000);


      progress = 0.6f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "Getting CVRFuryDataStorageUnit components", progress, 500);

      // get the CVRFuryDataStorageUnit components
      var dataStorageUnits = uploadedObject.GetComponentsInChildren<CVRFuryDataStorageUnit>();

      // get the number of CVRFuryDataStorageUnit components
      int numDataStorageUnits = dataStorageUnits.Length;

      // if there are 1 or more CVRFuryDataStorageUnit components present on the uploadedObject
      // then run the module installer
      if (numDataStorageUnits > 0)
      {
        progress = 0.8f;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "Starting module processing", progress, 500);

        progress = 1;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "Processing modules started", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();

        // Start processing the modules
        ProcessModules(dataStorageUnits, uploadedObject);

        // execute the the cleanup code
        ModulesInstallationFinalise(uploadedObject);
      }
      else
      {
        // if there are no CVRFuryDataStorageUnit components present on the uploadedObject, then do nothing
        progress = 1;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "No CVRFuryDataStorageUnit components found", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();
      }
    }

    private static void ProcessModules(CVRFuryDataStorageUnit[] dataStorageUnits, GameObject uploadedObject)
    {
      // Process each data storage unit
      for (int i = 0; i < dataStorageUnits.Length; i++)
      {
        var dataStorageUnit = dataStorageUnits[i];

        // get the modules
        var modules = dataStorageUnit.modules.modules;

        // get a count of the modules
        int numModules = modules.Count;

        // divide the progress bar into equal parts for each module
        float progressPerModuleOnUnityProgressBar = 1f / numModules;

        // initialize the unity progress bar
        float progressOnUnityProgressBar = 0;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "Processing modules started", progressOnUnityProgressBar, 500);

        // for each module in modules
        for (int j = 0; j < numModules; j++)
        {
          // module processing code triggers etc

          // wait for 1 seconds
          System.Threading.Thread.Sleep(1000);

          // module processing trigger code
          // get the module
          var module = modules[j];
          HandleModule(module, uploadedObject);

          // Update the progress bar after processing the module
          progressOnUnityProgressBar = progressPerModuleOnUnityProgressBar * (j + 1);

          // Update the unity progress bar
          DisplayProgressBarAndSleep("CVRFury Module Installation",
                                     "Processing modules",
                                     progressOnUnityProgressBar,
                                     0
                                    );
        }
        // module done
        // close current unity progress bar
        EditorUtility.ClearProgressBar();
      }
      // all modules done
    }



    //// Async functions -----------------------------------------------------------------------------------------------

    /// <summary>
    /// Install CVRFury Modules on a given GameObject, Async for play mode
    /// Mode 0 = Play Mode
    /// Mode 1 = Build Mode
    /// </summary>
    /// <param name="uploadedObject"></param>
    /// <param name="mode"></param>
    public static async Task InstallCVRFuryModulesAsync(GameObject uploadedObject, int mode = 0)
    {
      // trap for build mode, this method should not be called in build mode
      if (mode == 1)
      {
        CoreLogCritical("InstallCVRFuryModulesAsync called in build mode");
        return;
      }

      // Initialize the overlay unity progress bar
      float progress = 0;
      await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Initializing...", progress, 500);

      // popup title depending on mode, suffixing with " - Play Mode" or " - Build Mode"
      string popupTitle = InstallModeString(mode);

      progress = 0.1f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "getting uploadObject", progress, 500);

      // Implementation
      string path = GetGameObjectPath(uploadedObject);
      progress = 0.4f;
      await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Target for CVRFury Modules is \n\n" + path, progress, 2000);


      progress = 0.6f;
      await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Getting CVRFuryDataStorageUnit components", progress, 500);

      // get the CVRFuryDataStorageUnit components
      var dataStorageUnits = uploadedObject.GetComponentsInChildren<CVRFuryDataStorageUnit>();

      // get the number of CVRFuryDataStorageUnit components
      int numDataStorageUnits = dataStorageUnits.Length;

      // if there are 1 or more CVRFuryDataStorageUnit components present on the uploadedObject
      // then run the module installer
      if (numDataStorageUnits > 0)
      {
        progress = 0.8f;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Starting module processing", progress, 500);
        // show modal progress window
        ModalWindow.ShowWindow(uploadedObject, dataStorageUnits, path);

        progress = 1;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Processing modules started", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();
        // Start processing the modules asynchronously
        await ProcessModulesAsync(dataStorageUnits, uploadedObject);

        // execute the the cleanup code
        ModulesInstallationFinalise(uploadedObject);
      }
      else
      {
        // if there are no CVRFuryDataStorageUnit components present on the uploadedObject, then do nothing
        progress = 1;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "No CVRFuryDataStorageUnit components found", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();
      }
    }

    private static async Task ProcessModulesAsync(CVRFuryDataStorageUnit[] dataStorageUnits, GameObject uploadedObject)
    {
      // Process each data storage unit
      for (int i = 0; i < dataStorageUnits.Length; i++)
      {
        var dataStorageUnit = dataStorageUnits[i];

        // get the modules
        var modules = dataStorageUnit.modules.modules;

        // get a count of the modules
        int numModules = modules.Count;

        // divide the progress bar into equal parts for each module
        float progressPerModule = 100f / numModules;
        float progressPerModuleOnUnityProgressBar = 1f / numModules;

        // initialize the unity progress bar
        float progressOnUnityProgressBar = 0;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Processing modules started", progressOnUnityProgressBar, 500);

        // initialize the sub-progress bar
        float progress = 0;
        ModalWindow.UpdateSubProgressBar(i, progress);

        // for each module in modules
        for (int j = 0; j < numModules; j++)
        {
          // module processing code triggers etc

          // wait for 1 seconds
          await Task.Delay(1000);

          // module processing trigger code
          // get the module
          var module = modules[j];
          HandleModule(module, uploadedObject);

          // Update the progress bar after processing the module
          progress = progressPerModule * (j + 1);
          progressOnUnityProgressBar = progressPerModuleOnUnityProgressBar * (j + 1);

          // Update the unity progress bar
          await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Processing modules", progressOnUnityProgressBar, 0);

          // Update the sub-progress bar
          ModalWindow.UpdateSubProgressBar(i, progress);
        }
        // module done
        // close current unity progress bar
        EditorUtility.ClearProgressBar();
      }
      // all modules done
    }

    //// assistive functions --------------------------------------------------------------------------------------------

    /// <summary>
    /// This function is called to finalise the module installation and do trigger any final cleanup code
    /// </summary>
    public static void ModulesInstallationFinalise(GameObject uploadedObject)
    {
      // trigger lock file cleanup
      LockfileCleanup(uploadedObject);

      // finalise the module installation
      CoreLog("Module installation finalised");
    }

    /// <summary>
    /// This function clears up relevant lock files
    /// </summary>
    public static void LockfileCleanup(GameObject avatar)
    {
      // only do this if the full controller module is present
      #if NVH_CVRFURY_EXISTS_MI_FC
      // get the lock file path for the current avatar controller creation and delete it if it exists
      string lockFilePath = Constants.ASSETS_MANAGED_FOLDER + "/GeneratedControllers/" + avatar.name + "/processing.lock";
      if (File.Exists(lockFilePath))
      {
        File.Delete(lockFilePath);
      }
      #endif

    }

  }

}

// #endif
