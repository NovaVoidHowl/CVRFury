// { "version": "0.5.12" , "canInstall": true , "optional": true , "defineSymbolSuffix": "_MI_CORE", dependencies: []}
// #if UNITY_EDITOR && CVR_CCK_EXISTS

using Math = System.Math;
using System.Collections;
using System.Collections.Generic;
using System;
using System.Threading.Tasks;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEngine.SceneManagement;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Scripts.Editor;
using ABI.CCK.Components;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;
using uk.novavoidhowl.dev.cvrfury.packagecore;

namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  public interface IModuleProcessor
  {
    void ProcessModule(CVRFuryModule module);
  }

  public partial class CVRFuryModuleInstaller
  {
    /// <summary>
    /// Install CVRFury Modules on a given GameObject
    /// Mode 0 = Play Mode
    /// Mode 1 = Build Mode
    /// </summary>
    /// <param name="uploadedObject"></param>
    /// <param name="mode"></param>
    public static void InstallCVRFuryModules(GameObject uploadedObject, int mode = 0)
    {
      // Initialize the overlay unity progress bar
      float progress = 0;
      EditorUtility.DisplayProgressBar("CVRFury Module Installation", "Initializing...", progress);
      System.Threading.Thread.Sleep(500); // Sleep for 500ms to allow the progress bar to show

      // popup title depending on mode, suffixing with " - Play Mode" or " - Build Mode"
      string popupTitle = "CVRFury Module Installer - ";
      if (mode == 0) popupTitle += "Play Mode";
      else if (mode == 1) popupTitle += "Build Mode";
      progress = 0.1f;
      EditorUtility.DisplayProgressBar("CVRFury Module Installation", "getting uploadObject", progress);
      System.Threading.Thread.Sleep(500); // Sleep for 500ms to allow the progress bar to show

      // Implementation
      string path = GetGameObjectPath(uploadedObject);
      progress = 0.4f;
      EditorUtility.DisplayProgressBar("CVRFury Module Installation", "Target for CVRFury Modules is \n\n" + path, progress);
      System.Threading.Thread.Sleep(4000); // Sleep for 2000ms to allow the progress bar to show and the user to read the message

      progress = 0.6f;
      EditorUtility.DisplayProgressBar("CVRFury Module Installation", "Getting CVRFuryDataStorageUnit components", progress);
      System.Threading.Thread.Sleep(500); // Sleep for 500ms to allow the progress bar to show
      // get the CVRFuryDataStorageUnit components
      var dataStorageUnits = uploadedObject.GetComponentsInChildren<CVRFuryDataStorageUnit>();

      // get the number of CVRFuryDataStorageUnit components
      int numDataStorageUnits = dataStorageUnits.Length;

      // if there are 1 or more CVRFuryDataStorageUnit components present on the uploadedObject
      // then run the module installer
      if (numDataStorageUnits > 0)
      {
        progress = 0.8f;
        EditorUtility.DisplayProgressBar("CVRFury Module Installation", "Starting module processing", progress);
        System.Threading.Thread.Sleep(500); // Sleep for 500ms to allow the progress bar to show
        // show modal progress window
        ModalWindow.ShowWindow(uploadedObject, dataStorageUnits, path);

        progress = 1;
        EditorUtility.DisplayProgressBar("CVRFury Module Installation", "Processing modules started", progress);
        System.Threading.Thread.Sleep(500); // Sleep for 500ms to allow the progress bar to show
        // Start processing the modules asynchronously, then call ModuleInstallOnBuild.OnInstallationComplete when done
        EditorCoroutine.Start(coroutine => ProcessModules(coroutine, dataStorageUnits), () => ModuleInstallOnBuild.OnInstallationComplete());
      }
      else
      {
        // if there are no CVRFuryDataStorageUnit components present on the uploadedObject, then do nothing
        progress = 1;
        EditorUtility.DisplayProgressBar("CVRFury Module Installation", "No CVRFuryDataStorageUnit components found", progress);
        System.Threading.Thread.Sleep(2000); // Sleep for 2000ms to allow the progress bar to show and the user to read the message
        // signal that the task is complete
        ModuleInstallOnBuild.OnInstallationComplete(true);
      }

      // close the progress bar
      EditorUtility.ClearProgressBar();

    }

    private static IEnumerator ProcessModules(EditorCoroutine coroutine, CVRFuryDataStorageUnit[] dataStorageUnits)
    {
      // Process each data storage unit
      for (int i = 0; i < dataStorageUnits.Length; i++)
      {
        var dataStorageUnit = dataStorageUnits[i];

        // get the modules
        var modules = dataStorageUnit.modules.modules;

        // get a count of the modules
        int numModules = modules.Count;

        // divide the progress bar into equal parts for each module
        float progressPerModule = 100f / numModules;

        // for each module in modules
        for (int j = 0; j < numModules; j++)
        {
          // module processing code triggers etc

          // wait for 1 seconds
          yield return new EditorWaitForSeconds(1);

          // module processing trigger code
          // get the module
          var module = modules[j];
          IModuleProcessor processor = null;
          // case statement to process the module based on its type
          switch (module)
          {
            case uploadObjectStateSetter:
              processor = new uploadObjectStateSetterProcessor();
              break;
            default:
              // console print to say that the module type is not recognised
              CoreLog("Module type not recognised");
              break;
          }

          if (processor != null)
          {
            processor.ProcessModule(module);
          }

          // console print to say that the module has been processed
          CoreLog("Module " + modules[j].name + " processed");

          // Update the progress bar after processing the module
          float progress = progressPerModule * (j + 1);
          ModalWindow.UpdateSubProgressBar(i, progress);


        }
        // all modules processed so can stop coroutine now
        coroutine.Stop();

      }
    }




  }



  [InitializeOnLoad]
  public class ModuleInstallOnBuild
  {
    // Add a TaskCompletionSource field
    private static TaskCompletionSource<bool> tcs;


    static ModuleInstallOnBuild()
    {
      // attach to OnPreBundleEvent event
      CCK_BuildUtility.PreAvatarBundleEvent.AddListener(OnPreBundleEvent);

      // console print to show that the event has been attached
      CoreLog("ModuleInstallOnBuild attached to OnPreBundleEvent");
    }

    private static void OnPreBundleEvent(GameObject uploadedObject)
    {
      try
      {
        // set the ModuleInstallerState.IsModuleInstallOnBuildCalled to true,
        // so that the ModuleInstallOnPlay does not run
        ModuleInstallerState.IsModuleInstallOnBuildCalled = true;

        // if uploadedObject is null, do nothing
        if (uploadedObject == null) return;

        // Initialize the TaskCompletionSource
        tcs = new TaskCompletionSource<bool>();

        // Start the installation process on a separate thread
        Task.Run(() => CVRFuryModuleInstaller.InstallCVRFuryModules(uploadedObject, 1));

        // Periodically check whether the task is complete
        EditorCoroutine.Start(coroutine => CheckTaskCompletion(coroutine));
      }
      catch (Exception e)
      {
        // pop up to show that an exception has been caught
        EditorUtility.DisplayDialog("Exception caught in ModuleInstallOnBuild.OnPreBundleEvent", e.Message, "OK");
      }
    }

    private static IEnumerator CheckTaskCompletion(EditorCoroutine coroutine)
    {
      while (!tcs.Task.IsCompleted)
      {
        // Wait for 1 second
        yield return new EditorWaitForSeconds(1);

        if (tcs.Task.IsCompleted)
        {
          // Signal that the task is complete
          tcs.SetResult(true);

          // pop up to show that the task is complete
          EditorUtility.DisplayDialog("CVRFury Module Installation", "[OnPreBundleEvent] CVRFury Module Installation Complete", "OK");

          // Stop the coroutine
          coroutine.Stop();
        }
      }
    }

    public static void OnInstallationComplete(bool noTcs  = false)
    {
      // note console print does not work here

      if (!noTcs && tcs != null)
      {

        // Signal that the task is complete
        tcs.SetResult(true);
        // debug pop to show tcs triggered
        EditorUtility.DisplayDialog("CVRFury Module Installation", "[OnInstallationComplete] tcs triggered", "OK");
      }
    }
  }

  public class ModuleInstallOnPlay
  {
    [RuntimeInitializeOnLoadMethod]
    static void RunOnStart()
    {
      if (ModuleInstallerState.IsModuleInstallOnBuildCalled)
      {
        // console print to show that the ModuleInstallOnPlay has been skipped
        CoreLog("ModuleInstallOnPlay skipped as in Build Mode");
        // play only gets called once so reset the ModuleInstallerState.IsModuleInstallOnBuildCalled to false
        ModuleInstallerState.IsModuleInstallOnBuildCalled = false;
      }
      else
      {
        // Find all active game objects with a CVRAvatar component
        var avatars = GameObject.FindObjectsOfType<CVRAvatar>();

        foreach (var avatar in avatars)
        {
          CVRFuryModuleInstaller.InstallCVRFuryModules(avatar.gameObject, 0);
        }
      }

    }
  }


///////////////////////////////////////////////////////////////////////////////////////////
// ancillary classes

//////
// EditorCoroutine
  public class EditorCoroutine
  {
    public static EditorCoroutine Start(Func<EditorCoroutine, IEnumerator> routineFactory, Action callback = null)
    {
      EditorCoroutine coroutine = new EditorCoroutine(routineFactory, callback);
      coroutine.Start();
      return coroutine;
    }

    private readonly IEnumerator routine;
    private readonly Action callback;

    private EditorCoroutine(Func<EditorCoroutine, IEnumerator> routineFactory, Action callback)
    {
      this.routine = routineFactory(this);
      this.callback = callback;
    }

    private void Start()
    {
      EditorApplication.update += Update;
    }

    public void Stop()
    {
      EditorApplication.update -= Update;
    }

    private void Update()
    {
      if (routine.Current is EditorWaitForSeconds waitForSeconds)
      {
        if (!waitForSeconds.IsDone())
          return;
      }

      if (!routine.MoveNext())
      {
        Stop();
        callback?.Invoke();
      }
    }
  }

  public class EditorWaitForSeconds
  {
    public float timeToWait;
    private float startTime;

    public EditorWaitForSeconds(float time)
    {
      timeToWait = time;
      startTime = Time.realtimeSinceStartup;
    }

    public bool IsDone()
    {
      return Time.realtimeSinceStartup - startTime >= timeToWait;
    }
  }


//////
// Window class
//
  public class ModalWindow : EditorWindow
  {
    private static GameObject uploadedObject;
    private static double openTime;
    private static double closeTime;

    private static EditorApplication.CallbackFunction updateProgressBarAction;
    private static EditorApplication.CallbackFunction closeWindowAction;
    private static ProgressBar progressBar;
    private static List<ProgressBar> subProgressBars = new List<ProgressBar>();

    private static CVRFuryDataStorageUnit[] _dataStorageUnits;
    private static string _pathToUploadedObject;


    public static void ShowWindow(GameObject targetObject, CVRFuryDataStorageUnit[] dataStorageUnits, string pathToUploadedObject)
    {
      uploadedObject = targetObject;

      // Store the dataStorageUnits and pathToUploadedObject in static fields
      _dataStorageUnits = dataStorageUnits;
      _pathToUploadedObject = pathToUploadedObject;

      // check if any of targetObject, dataStorageUnits or pathToUploadedObject are null
      if (uploadedObject == null || dataStorageUnits == null || pathToUploadedObject == null)
      {
        // if any of targetObject, dataStorageUnits or pathToUploadedObject are null, then stop here and force close the window
        CoreLogCritical("[ID MIC-227]  targetObject, dataStorageUnits or pathToUploadedObject is null\n"+
                  " please report this to the CVRFury project"
                  );
        // bail out
        return;
      }

      var mainWindowPos = EditorGUIUtility.GetMainWindowPosition();
      var size = new Vector2(600, 600);
      ModalWindow window = ScriptableObject.CreateInstance<ModalWindow>();
      window.position = new Rect(mainWindowPos.xMin + (mainWindowPos.width - size.x) * 0.5f, mainWindowPos.yMin + 100, size.x, size.y);
      window.ShowPopup();
      // print to console to show that the window has been shown
      CoreLog("ModalWindow shown");
    }

    public static void UpdateSubProgressBar(int index, float progress)
    {
      if (index >= 0 && index < subProgressBars.Count)
      {
        subProgressBars[index].value = progress;
      }
    }

    public void OnEnable()
    {
      // load base UXML
      var baseTree = Resources.Load<VisualTreeAsset>(
        Constants.PROGRAM_DISPLAY_NAME + "/CVRFuryBuildUI/UnityUXML/buildProgressWindow"
      );

      // Check if the UXML file was loaded
      if (baseTree == null)
      {
        Debug.LogError(
          "Failed to load UXML file at 'UnityUXML/buildProgressWindow'. Please ensure the file exists at the specified path."
        );
        // If the UXML file was not loaded add a new label to the root.
        rootVisualElement.Add(new Label("CRITICAL ERROR : UXML could not be loaded."));
        return;
      }

      // Load and apply the stylesheet
      var stylesheet = Resources.Load<StyleSheet>(
        Constants.PROGRAM_DISPLAY_NAME + "/CVRFuryBuildUI/UnityStyleSheets/buildProgressWindow"
      );

      // Check if the StyleSheet was loaded
      if (stylesheet == null)
      {
        Debug.LogError(
          "Failed to load StyleSheet at 'UnityStyleSheets/buildProgressWindow'. Please ensure the file exists at the specified path."
        );
        // If the StyleSheet was not loaded add a new label to the root.
        rootVisualElement.Add(new Label("CRITICAL ERROR : StyleSheet could not be loaded."));
        return;
      }

      // Instantiate the UXML tree into a TemplateContainer
      var templateContainer = baseTree.CloneTree();

      // Create a temporary list to hold the children
      var children = new List<VisualElement>(templateContainer.Children());

      // Add the children of the TemplateContainer to the rootVisualElement
      foreach (var child in children)
      {
          rootVisualElement.Add(child);
      }

      // Apply the StyleSheet
      rootVisualElement.styleSheets.Add(stylesheet);

      // get the CVRFuryDataStorageUnit components
      var dataStorageUnits = _dataStorageUnits;

      if (dataStorageUnits == null)
      {
        // if dataStorageUnits is null, then stop here and force close the window
        CoreLogCritical("[ID MIC-333]  dataStorageUnits is null\n"+
                  " looks like the CVR CCK has already stripped the CVRFuryDataStorageUnit components from the uploadedObject\n"+
                  " this is a race condition, and needs to be fixed, please report this to the CVRFury project"
                 );
        closeTime = 0;
        CloseWindow();
      }
      else
      {
        //ok so we have dataStorageUnits, let's continue

        // get the number of CVRFuryDataStorageUnit components
        int numDataStorageUnits = dataStorageUnits.Length;

        // check that the number of CVRFuryDataStorageUnit components is greater than 0
        if (numDataStorageUnits <= 0)
        {
          // if there are no CVRFuryDataStorageUnit components present on the uploadedObject
          // stop here and force close the window
          CoreLogCritical("[ID MIC-352] dataStorageUnits not found\n"+
                  " looks like the CVR CCK has already stripped the CVRFuryDataStorageUnit components from the uploadedObject\n"+
                  " this is a race condition, and needs to be fixed, please report this to the CVRFury project"
                 );
          closeTime = 0;
          CloseWindow();
        }
        else
        {
          // and we have one or more of dataStorageUnits, so let's continue
          // get the BuildProgressWindowTitle label and set its text
          var buildProgressWindowTitle = rootVisualElement.Q<Label>("BuildProgressWindowTitle");
          buildProgressWindowTitle.text = "Installing CVR Fury Modules on: " + uploadedObject.name;

          // get the BuildProgressWindowPathToUploadedObject label and set its text
          var buildProgressWindowPathToUploadedObject = rootVisualElement.Q<Label>("BuildProgressWindowPathToUploadedObject");
          buildProgressWindowPathToUploadedObject.text = "Path : " + _pathToUploadedObject;

          // get the BuildProgressWindowMessage label and set its text
          var buildProgressWindowMessage = rootVisualElement.Q<Label>("BuildProgressComponentsMessage");
          buildProgressWindowMessage.text = "Number of CVRFuryDataStorageUnit components: " + numDataStorageUnits;

          // get the BuildProgressBarHolder and add a new ProgressBar to it
          var buildProgressBarHolder = rootVisualElement.Q<VisualElement>("BuildProgressBarHolder");
          progressBar = new ProgressBar();
          progressBar.value = 0;
          buildProgressBarHolder.Add(progressBar);

          // get the BuildSubProgressBarsHolder and add a new ProgressBar to it for each CVRFuryDataStorageUnit
          var buildSubProgressBarsHolder = rootVisualElement.Q<VisualElement>("BuildSubProgressBarsHolder");

          // Clear the list of sub-progress bars
          subProgressBars.Clear();

          // for each name in dataStorageUnitNames add a new ProgressBar to buildSubProgressBarsHolder
          foreach (var dataStorageUnit in dataStorageUnits)
          {
            // get the name of the object the CVRFuryDataStorageUnit is on
            string name = dataStorageUnit.gameObject.name;
            // get the number of Modules in the CVRFuryDataStorageUnit
            int numModules = dataStorageUnit.modules.modules.Count;

            // create a new ProgressBar
            var subProgressBar = new ProgressBar();
            subProgressBar.value = 0;
            buildSubProgressBarsHolder.Add(subProgressBar);
            // add a name to the ProgressBar so it can be styled
            subProgressBar.name = "SubProgressBar";
            // add a label to the ProgressBar with the name of the CVRFuryDataStorageUnit
            Label subProgressBarLabel = new Label(name + " (" + numModules + " modules)");
            // add a name to the ProgressBar so it can be styled
            subProgressBarLabel.name = "SubProgressBarText";
            subProgressBar.Add(subProgressBarLabel);

            // Add the sub-progress bar to the list
            subProgressBars.Add(subProgressBar);

          }
        }
      }
      // Set openTime to the current time
      openTime = EditorApplication.timeSinceStartup;

      updateProgressBarAction = () => UpdateProgressBar();
      closeWindowAction = CloseWindow;

      EditorApplication.update += updateProgressBarAction;
      EditorApplication.update += closeWindowAction;
    }

    private static void UpdateProgressBar()
    {
      // failsafe if subProgressBar is null set closeTime to 1 second in the future
      if (subProgressBars == null)
      {
        if (closeTime == 0)
        {
          closeTime = EditorApplication.timeSinceStartup + 1;
        }
      }
      else
      {
        // ok so the subProgressBars is not null, let's continue
        // check if there are any sub-progress bars
        if (subProgressBars.Count == 0)
        {
          // if there are no sub-progress bars, then set the closeTime to 1 second in the future
          if (closeTime == 0)
          {
            closeTime = EditorApplication.timeSinceStartup + 1;
          }
        }
        else
        {

          // Calculate the total progress of all sub-progress bars
          float totalSubProgress = 0;
          foreach (var subProgressBar in subProgressBars)
          {
            totalSubProgress += subProgressBar.value;
          }

          // Calculate the average progress of all sub-progress bars
          float averageSubProgress = totalSubProgress / subProgressBars.Count;

          // failsafe if progressBar is null set closeTime to 1 second in the future
          if (progressBar == null)
          {
            if (closeTime == 0)
            {
              closeTime = EditorApplication.timeSinceStartup + 1;
            }
          }
          else
          {
            // progress bar is not null, so set the main progress bar value to the average sub-progress
            // Set the main progress bar value to the average sub-progress
            progressBar.value = averageSubProgress;

            if (progressBar.value >= 100 && closeTime == 0)
            {
              // Set the close time to 2 seconds in the future
              closeTime = EditorApplication.timeSinceStartup + 2;
            }
          }
        }
      }
    }

    private static void CloseWindow()
    {

      if (closeTime > 0 && EditorApplication.timeSinceStartup > closeTime)
      {
        // Unsubscribe UpdateProgressBar and CloseWindow from EditorApplication.update
        EditorApplication.update -= updateProgressBarAction;
        EditorApplication.update -= closeWindowAction;

        // debug print to show that the window is closing
        CoreLog("ModalWindow closing");

        // Close the window
        GetWindow<ModalWindow>().Close();
      }
    }
  }




}

// #endif
