// { "version": "0.20.16" , "canInstall": true , "optional": false , "defineSymbolSuffix": "_MI_CORE", dependencies: ["_MI_CORE_UI"]}
// #if UNITY_EDITOR && CVR_CCK_EXISTS

using Math = System.Math;
using System.Collections;
using System.Collections.Generic;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using UnityEditor;
using UnityEditor.Animations;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEngine.SceneManagement;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Scripts.Editor;
using ABI.CCK.Components;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;
using uk.novavoidhowl.dev.cvrfury.packagecore;

namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  public interface IModuleProcessor
  {
    void ProcessModule(CVRFuryModule module, GameObject targetAvatar, int DSUNumber, GameObject DSUObject);
  }

  public partial class CVRFuryModuleInstaller
  {

    //// Standard functions --------------------------------------------------------------------------------------------
    private static string InstallModeString (int mode) {
      string baseString = "CVRFury Module Installer - ";
      if (mode == 0) return baseString + "Play Mode";
      else if (mode == 1) return baseString + "Build Mode";
      else return baseString + "Unknown Mode";
    }


    public static void HandleModule(CVRFuryModule module, GameObject uploadedObject, int DSUNumber, GameObject DSUObject)
    {
        IModuleProcessor processor = null;
        // case statement to process the module based on its type
        switch (module)
        {
            #if NVH_CVRFURY_EXISTS_MI_AOU
            case objectStateSetter:
                processor = new objectStateSetterProcessor();
                break;
            case objectDefaultMaterialSetter:
                processor = new objectDefaultMaterialSetterProcessor();
                break;

            case blockBlinkSetter:
                processor = new blockBlinkSetterProcessor();
                break;

            case blockVisemesSetter:
                processor = new blockVisemesSetterProcessor();
                break;

            case deleteOnUpload:
                processor = new deleteOnUploadProcessor();
                break;

            case showInFirstPerson:
                processor = new showInFirstPersonProcessor();
                break;
            #endif
            #if NVH_CVRFURY_EXISTS_MI_FC
            case fullControllerModule:
                processor = new fullControllerModuleProcessor();
                break;
            #endif
            #if NVH_CVRFURY_EXISTS_MI_AL
            case armatureLink:
                processor = new armatureLinkModuleProcessor();
                break;
            #endif

            default:
                // console print to say that the module type is not recognised
                CoreLog("Module type not recognised");
                break;
        }

        if (processor != null)
        {
            processor.ProcessModule(module, uploadedObject, DSUNumber, DSUObject);
        }

        // console print to say that the module has been processed
        CoreLog("Module " + module.name + " processed");
    }

    /// <summary>
    /// Install CVRFury Modules on a given GameObject, Async for play mode
    /// Mode 0 = Play Mode
    /// Mode 1 = Build Mode
    /// </summary>
    /// <param name="uploadedObject"></param>
    /// <param name="mode"></param>
    public static void InstallCVRFuryModules(GameObject uploadedObject, int mode = 0)
    {
      // trap for play mode, this method should not be called in play mode
      if (mode == 0)
      {
        CoreLogCritical("InstallCVRFuryModules called in play mode");
        return;
      }

      // Run modules pre tasks
      RunModulesPreTasks(uploadedObject);

      // Initialize the overlay unity progress bar
      float progress = 0;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "Initializing...", progress, 500);

      // popup title depending on mode, suffixing with " - Play Mode" or " - Build Mode"
      string popupTitle = InstallModeString(mode);

      progress = 0.1f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "getting uploadObject", progress, 500);

      // Implementation
      string path = GetGameObjectPath(uploadedObject);
      progress = 0.4f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "Target for CVRFury Modules is \n\n" + path, progress, 2000);


      progress = 0.6f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "Getting CVRFuryDataStorageUnit components", progress, 500);

      // get the CVRFuryDataStorageUnit components
      var dataStorageUnits = uploadedObject.GetComponentsInChildren<CVRFuryDataStorageUnit>();

      // get the number of CVRFuryDataStorageUnit components
      int numDataStorageUnits = dataStorageUnits.Length;

      // if there are 1 or more CVRFuryDataStorageUnit components present on the uploadedObject
      // then run the module installer
      if (numDataStorageUnits > 0)
      {
        progress = 0.8f;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "Starting module processing", progress, 500);

        progress = 1;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "Processing modules started", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();

        // Start processing the modules
        ProcessModules(dataStorageUnits, uploadedObject);
      }
      else
      {
        // if there are no CVRFuryDataStorageUnit components present on the uploadedObject, then do nothing
        progress = 1;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "No CVRFuryDataStorageUnit components found", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();
      }
      // log cleanup process is triggered
      CoreLogDebug("Cleanup process triggered");

      // execute the the cleanup code
      ModulesInstallationFinalise(uploadedObject);

      // log that the module installation has been completed
      CoreLog("Module installation completed");
    }

    private static void ProcessModules(CVRFuryDataStorageUnit[] dataStorageUnits, GameObject uploadedObject)
    {
      // Process each data storage unit
      for (int i = 0; i < dataStorageUnits.Length; i++)
      {
        var dataStorageUnit = dataStorageUnits[i];

        // get the modules
        var modules = dataStorageUnit.modules.modules;

        // get a count of the modules
        int numModules = modules.Count;

        // divide the progress bar into equal parts for each module
        float progressPerModuleOnUnityProgressBar = 1f / numModules;

        // initialize the unity progress bar
        float progressOnUnityProgressBar = 0;
        DisplayProgressBarAndSleep("CVRFury Module Installation", "Processing modules started", progressOnUnityProgressBar, 500);

        // get the object the DSU is attached to
        var DSUObject = dataStorageUnit.gameObject;

        // re-order the modules such that all the modules that are of ModuleType="armatureLink" are processed last
        modules.Sort((x, y) =>
        {
          if (string.Equals(x.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase) && !string.Equals(y.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase))
          {
            return 1; // x is "greater", i.e., it should come later
          }
          if (!string.Equals(x.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase) && string.Equals(y.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase))
          {
            return -1; // x is "less", i.e., it should come earlier
          }
          return 0; // x and y are "equal" in terms of sorting
        });

        // for each module in modules
        for (int j = 0; j < numModules; j++)
        {
          // module processing code triggers etc

          // wait for 1 seconds
          System.Threading.Thread.Sleep(1000);

          // module processing trigger code
          // get the module
          var module = modules[j];
          HandleModule(module, uploadedObject, i, DSUObject);

          // Update the progress bar after processing the module
          progressOnUnityProgressBar = progressPerModuleOnUnityProgressBar * (j + 1);

          // Update the unity progress bar
          DisplayProgressBarAndSleep("CVRFury Module Installation",
                                     "Processing modules",
                                     progressOnUnityProgressBar,
                                     0
                                    );
        }
        // module done
        // close current unity progress bar
        EditorUtility.ClearProgressBar();
      }
      // all modules done
    }



    //// Async functions -----------------------------------------------------------------------------------------------
    public static async Task SelectAnimationClipsAsync(string tempItemsFolderPath)
    {
      // Get all animation clip files in the tempItemsFolderPath
      string[] animationClipFiles = Directory.GetFiles(tempItemsFolderPath, "*.anim", SearchOption.AllDirectories);
      
      // core log that the animation clip files paths have been loaded
      CoreLog("Animation clip files paths loaded");
      // log the number of animation clip files
      CoreLog("Number of animation clip files: " + animationClipFiles.Length);

      // Convert the file paths to asset paths
      string[] animationClipAssets = animationClipFiles.Select(x => x.Replace(Application.dataPath, "").Replace('\\', '/')).ToArray();
      
      // core log that the animation clip assets paths have been loaded
      CoreLog("Animation clip assets paths loaded");
      // log the number of animation clip assets
      CoreLog("Number of animation clip assets: " + animationClipAssets.Length);

      foreach (string animationClipAsset in animationClipAssets)
      {
        CoreLog("Processing animation clip asset: " + animationClipAsset);

        // Get the animation clip
        AnimationClip animationClip = AssetDatabase.LoadAssetAtPath<AnimationClip>(animationClipAsset);

        if (animationClip == null)
        {
          CoreLog("Failed to load animation clip at path: " + animationClipAsset);
          continue;
        }

        // Delay the selection of the animation clip until the next Editor update
        EditorApplication.delayCall += () =>
        {
            // Ping the animation clip in the Project window
            EditorGUIUtility.PingObject(animationClip);

            // Select the animation clip in the Unity Editor
            Selection.activeObject = animationClip;

            // log that the animation clip has been selected
            CoreLog("Animation clip selected: " + animationClip.name);
        };

        // Wait for a short time to allow the Unity Editor to update
        await Task.Delay(Constants.CLIP_VIEW_DELAY);
      }

      // deselect all objects in the Unity Editor
      Selection.activeObject = null;
    }


    /// <summary>
    /// Install CVRFury Modules on a given GameObject, Async for play mode
    /// Mode 0 = Play Mode
    /// Mode 1 = Build Mode
    /// </summary>
    /// <param name="uploadedObject"></param>
    /// <param name="mode"></param>
    public static async Task InstallCVRFuryModulesAsync(GameObject uploadedObject, int mode = 0)
    {
      // trap for build mode, this method should not be called in build mode
      if (mode == 1)
      {
        CoreLogCritical("InstallCVRFuryModulesAsync called in build mode");
        return;
      }

      // Run modules pre tasks
      RunModulesPreTasks(uploadedObject);

      // Initialize the overlay unity progress bar
      float progress = 0;
      await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Initializing...", progress, 500);

      // popup title depending on mode, suffixing with " - Play Mode" or " - Build Mode"
      string popupTitle = InstallModeString(mode);

      progress = 0.1f;
      DisplayProgressBarAndSleep("CVRFury Module Installation", "getting uploadObject", progress, 500);

      // Implementation
      string path = GetGameObjectPath(uploadedObject);
      progress = 0.4f;
      await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Target for CVRFury Modules is \n\n" + path, progress, 2000);


      progress = 0.6f;
      await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Getting CVRFuryDataStorageUnit components", progress, 500);

      // get the CVRFuryDataStorageUnit components
      var dataStorageUnits = uploadedObject.GetComponentsInChildren<CVRFuryDataStorageUnit>();

      // get the number of CVRFuryDataStorageUnit components
      int numDataStorageUnits = dataStorageUnits.Length;

      // if there are 1 or more CVRFuryDataStorageUnit components present on the uploadedObject
      // then run the module installer
      if (numDataStorageUnits > 0)
      {
        progress = 0.8f;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Starting module processing", progress, 500);
        // show modal progress window
        ModalWindow.ShowWindow(uploadedObject, dataStorageUnits, path);

        progress = 1;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Processing modules started", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();
        // Start processing the modules asynchronously
        await ProcessModulesAsync(dataStorageUnits, uploadedObject);
      }
      else
      {
        // if there are no CVRFuryDataStorageUnit components present on the uploadedObject, then do nothing
        progress = 1;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "No CVRFuryDataStorageUnit components found", progress, 2000);
        // close the progress bar
        EditorUtility.ClearProgressBar();
      }
      // log cleanup process is triggered
      CoreLogDebug("Cleanup process triggered");

      // execute the the cleanup code
      ModulesInstallationFinalise(uploadedObject);

      // get the path to the temp items folder
      string tempItemsFolderPath = Constants.ASSETS_MANAGED_FOLDER + "/Generated/" + uploadedObject.name + "/temp_items";

      // await SelectAnimationClipsAsync(tempItemsFolderPath);

      // log that the module installation has been completed
      CoreLog("Module installation completed");
    }

    private static async Task ProcessModulesAsync(CVRFuryDataStorageUnit[] dataStorageUnits, GameObject uploadedObject)
    {
      // Process each data storage unit
      for (int i = 0; i < dataStorageUnits.Length; i++)
      {
        var dataStorageUnit = dataStorageUnits[i];

        // get the modules
        var modules = dataStorageUnit.modules.modules;

        // get a count of the modules
        int numModules = modules.Count;

        // divide the progress bar into equal parts for each module
        float progressPerModule = 100f / numModules;
        float progressPerModuleOnUnityProgressBar = 1f / numModules;

        // initialize the unity progress bar
        float progressOnUnityProgressBar = 0;
        await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Processing modules started", progressOnUnityProgressBar, 500);

        // initialize the sub-progress bar
        float progress = 0;
        ModalWindow.UpdateSubProgressBar(i, progress);

        // get the object the DSU is attached to
        var DSUObject = dataStorageUnit.gameObject;

        // console print to say that the module order is being re-ordered (TODO: remove this line in production)
        CoreLogDebug("Re-ordering modules");

        // re-order the modules such that all the modules that are of ModuleType="armatureLink" are processed last
        modules.Sort((x, y) =>
        {
          if (string.Equals(x.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase) && !string.Equals(y.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase))
          {
            return 1; // x is "greater", i.e., it should come later
          }
          if (!string.Equals(x.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase) && string.Equals(y.ModuleType, "armatureLink", StringComparison.OrdinalIgnoreCase))
          {
            return -1; // x is "less", i.e., it should come earlier
          }
          return 0; // x and y are "equal" in terms of sorting
        });

        // for each module in modules
        for (int j = 0; j < numModules; j++)
        {
          // module processing code triggers etc

          // wait for 1 seconds
          await Task.Delay(1000);

          // module processing trigger code
          // get the module
          var module = modules[j];
          HandleModule(module, uploadedObject, i, DSUObject);

          // Update the progress bar after processing the module
          progress = progressPerModule * (j + 1);
          progressOnUnityProgressBar = progressPerModuleOnUnityProgressBar * (j + 1);

          // Update the unity progress bar
          await DisplayProgressBarAndSleepAsync("CVRFury Module Installation", "Processing modules", progressOnUnityProgressBar, 0);

          // Update the sub-progress bar
          ModalWindow.UpdateSubProgressBar(i, progress);
        }
        // module done
        // close current unity progress bar
        EditorUtility.ClearProgressBar();
      }
      // all modules done
    }

    //// assistive functions --------------------------------------------------------------------------------------------
    /// <summary>
    /// this function is called to run any pre-tasks before the module installation
    /// ie. cleanup of previous runs
    /// </summary>
    public static void RunModulesPreTasks(GameObject uploadedObject)
    {
      // deselect all objects in the Unity Editor
      Selection.activeObject = null;

      // purge old temp files
      PurgeTempFiles(uploadedObject);

      // prefab unpacker
      PrefabUnpacker(uploadedObject);

      // console print to say that the pre-tasks have been run
      CoreLog("Pre-tasks run");
    }

    /// <summary>
    /// function to walk the whole uploadedObject hierarchy and fully unpack any prefabs it finds
    /// </summary>
    public static void PrefabUnpacker(GameObject uploadedObject)
    {
      // debug log that the prefab unpacker is running
      CoreLogDebug("Prefab unpacker running");

      // get the root game object of the uploadedObject
      var root = uploadedObject.transform.root;

      // get the children of the root game object
      var children = root.GetComponentsInChildren<Transform>();

      // loop through the children
      foreach (var child in children)
      {
        // if the child is a prefab
        if (PrefabUtility.IsPartOfAnyPrefab(child.gameObject))
        {
          // unpack the prefab
          PrefabUtility.UnpackPrefabInstance(child.gameObject, PrefabUnpackMode.Completely, InteractionMode.AutomatedAction);
        }
      }

      // debug log that the prefab unpacker has finished
      CoreLogDebug("Prefab unpacker finished");
    }

    /// <summary>
    /// This function is called to purge any temp files from previous runs
    /// </summary>
    public static void PurgeTempFiles(GameObject uploadedObject)
    {
      // get the temp folder path for the current avatar controller creation
      string tempFolderPath = Constants.ASSETS_MANAGED_FOLDER + "/Generated/" + uploadedObject.name + "/temp_items";

      // if the temp folder exists, try to delete it
      if (Directory.Exists(tempFolderPath))
      {
        try
        {
          Directory.Delete(tempFolderPath, true);
        }
        catch (Exception e)
        {
          // log that the temp folder could not be deleted
          CoreLogError("Could not delete temp folder: " + tempFolderPath + "\n" + e.Message);
        }
      }

      // provided that the folder was removed successfully, try to get rid of the meta file for the folder
      string tempFolderPathMeta = tempFolderPath + ".meta";
      if (File.Exists(tempFolderPathMeta))
      {
        try
        {
          File.Delete(tempFolderPathMeta);
        }
        catch (Exception e)
        {
          // log that the temp folder meta file could not be deleted
          CoreLogError("Could not delete temp folder meta file: " + tempFolderPathMeta + "\n" + e.Message);
        }
      }

      // if the folder and meta file are still there, loop through the files in the folder and try to delete them
      if (Directory.Exists(tempFolderPath))
      {
        string[] files = Directory.GetFiles(tempFolderPath);
        foreach (string file in files)
        {
          try
          {
            File.Delete(file);
          }
          catch (Exception e)
          {
            // log that the file could not be deleted
            CoreLogError("Could not delete file: " + file + "\n" + e.Message);
          }
        }
      }
      
      //update asset database
      AssetDatabase.Refresh();
    }


    /// <summary>
    /// This function is called to finalise the module installation and do trigger any final cleanup code
    /// </summary>
    public static void ModulesInstallationFinalise(GameObject uploadedObject)
    {
      // console print to say that the module installation is being finalised
      CoreLog("Module installation finalising");
      // animator controller cleanup
      AnimatorControllerCleanup(uploadedObject);
      //core log that the animator controller has been cleaned up
      CoreLogDebug("Animator controller cleaned up");


      // trigger lock file cleanup
      LockfileCleanup(uploadedObject);
      //core log that the lock file has been cleaned up
      CoreLogDebug("Lock files cleaned up");

      // wait for 1 seconds
      System.Threading.Thread.Sleep(500);

      // get the path to the temp items folder
      string tempItemsFolderPath = Constants.ASSETS_MANAGED_FOLDER + "/Generated/" + uploadedObject.name + "/temp_items";

      // reimport all assets in the the temp_items folder
      AssetDatabase.ImportAsset(tempItemsFolderPath, ImportAssetOptions.ImportRecursive);

      // log that the assets have been reimported
      CoreLogDebug("Assets reimported");


      // force refresh the asset database
      AssetDatabase.SaveAssets();
      AssetDatabase.Refresh();
      EditorApplication.QueuePlayerLoopUpdate();

      // log that asset database has been refreshed
      CoreLogDebug("Asset database refreshed");

      // wait for 1 seconds
      System.Threading.Thread.Sleep(500);



      // finalise the module installation
      CoreLog("Module installation finalised");
    }

    /// <summary>
    /// This function removes empty layers from the final animator controller
    /// </summary>
    public static void AnimatorControllerCleanup(GameObject avatar)
    {
      // only do this if the full controller module is present
      #if NVH_CVRFURY_EXISTS_MI_FC
      // get the avatar component
      var avatarComponent = avatar.GetComponent<CVRAvatar>();

      // get the overrides from the avatar component
      AnimatorOverrideController overrides = avatarComponent.overrides;

      // get the animator controller from the AnimatorOverrideController
      AnimatorController animatorController = overrides.runtimeAnimatorController as AnimatorController;
      

      // loop through the layers in the animator controller
      for (int i = animatorController.layers.Length - 1; i >= 0; i--)
      {
        // get the layer
        var layer = animatorController.layers[i];

        // get the state machine from the layer
        var stateMachine = layer.stateMachine;

        // get the number of states in the state machine
        int numStates = stateMachine.states.Length;

        // if there are no states in the state machine
        if (numStates == 0)
        {
          // remove the layer from the animator controller
          animatorController.RemoveLayer(i);
        }
      }

      // save the animator controller
      EditorUtility.SetDirty(animatorController);
      AssetDatabase.SaveAssets();
      #endif
    }

    /// <summary>
    /// This function clears up relevant lock files
    /// </summary>
    public static void LockfileCleanup(GameObject avatar)
    {
      // only do this if the full controller module is present
      #if NVH_CVRFURY_EXISTS_MI_FC
      // get the lock file path for the current avatar controller creation and delete it if it exists
      string lockFilePath = Constants.ASSETS_MANAGED_FOLDER + "/Generated/" + avatar.name + "/processing.lock";
      if (File.Exists(lockFilePath))
      {
        File.Delete(lockFilePath);
      }
      // and get rid of the meta file for the lock file
      string lockFilePathMeta = lockFilePath + ".meta";
      if (File.Exists(lockFilePathMeta))
      {
        File.Delete(lockFilePathMeta);
      }

      #endif

    }
  }
  public class ReportBuilderSupport
  {
    public static void ReportInit(string buildReportPath, CVRAvatar avatar, CVRFuryModule module)
    {
      // create a new build report file using the buildReportPath
      File.WriteAllText(buildReportPath, string.Empty);

      // add a header to the build report file
      File.AppendAllText(buildReportPath, "Build Report\n\n");

      // add a timestamp to the build report file
      File.AppendAllText(buildReportPath, "Timestamp: " + System.DateTime.Now + "\n\n");

      // add the avatar name to the build report file
      File.AppendAllText(buildReportPath, "Avatar Name: " + avatar.name + "\n\n");

      // add the module name to the build report file
      File.AppendAllText(buildReportPath, "Module Name: " + module.name + "\n\n");

      // add a separator to the build report file
      File.AppendAllText(buildReportPath, "----------------------------------------\n\n");
    }
    
    public static void ReportAddBlankLine(string buildReportPath)
    {
      // add a blank line to the build report file
      File.AppendAllText(buildReportPath, "\n");
    }

    public static void ReportAddLine(string buildReportPath, string message)
    {
      // add a message to the build report file
      File.AppendAllText(buildReportPath, message + "\n");
    }

    public static void ReportAddErrorLine(string buildReportPath, string message)
    {
      // add an error message to the build report file
      File.AppendAllText(buildReportPath, "Error: " + message + "\n");
    }

    public static void ReportEnd(string buildReportPath)
    {
      // add a separator to the build report file
      File.AppendAllText(buildReportPath, "\n----------------------------------------\n\n");
    }

  }

}

// #endif
