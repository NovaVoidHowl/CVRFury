// { "version": "0.0.9" , "canInstall": true , "optional": true , "defineSymbolSuffix": "_MI_DBG", dependencies: ["NVH_CVRFURY_EXISTS_MI_CORE"]}
#if UNITY_EDITOR && NVH_CVRFURY_DEV_ENABLED

using Math = System.Math;
using System.Collections;
using System.Collections.Generic;
using System;
using System.Threading.Tasks;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEngine.SceneManagement;
using uk.novavoidhowl.dev.cvrfury.runtime;
using ABI.CCK.Scripts.Editor;
using ABI.CCK.Components;
using Constants = uk.novavoidhowl.dev.cvrfury.packagecore.Constants;
using static uk.novavoidhowl.dev.cvrfury.packagecore.CoreUtils;
using uk.novavoidhowl.dev.cvrfury.packagecore;

namespace uk.novavoidhowl.dev.cvrfury.deployable
{
  //for debug purposes only - to check/set the ModuleInstallOnBuild state

  public class CVRFuryModuleInstaller_Core_DBG
  {
    private const string MENU_PATH =
      "NVH/" + Constants.PROGRAM_DISPLAY_NAME + "/Debug/Development/Module Install On Build";

    [MenuItem(MENU_PATH)]
    private static void ToggleModuleInstallOnBuild()
    {
      ModuleInstallerState.IsModuleInstallOnBuildCalled = !ModuleInstallerState.IsModuleInstallOnBuildCalled;
      UpdateMenu();
    }

    [MenuItem(MENU_PATH, true)]
    private static bool ToggleModuleInstallOnBuildValidation()
    {
      Menu.SetChecked(MENU_PATH, ModuleInstallerState.IsModuleInstallOnBuildCalled);
      return true;
    }

    [InitializeOnLoadMethod]
    private static void UpdateMenu()
    {
      if (ModuleInstallerState.IsModuleInstallOnBuildCalled)
      {
        Menu.SetChecked(MENU_PATH, true);
      }
      else
      {
        Menu.SetChecked(MENU_PATH, false);
      }
    }
  }

  public class CleanupDisablePrintMenu
  {
    private const string MENU_PATH = "NVH/" + Constants.PROGRAM_DISPLAY_NAME + "/Debug/Development/Cleanup Disable";
    private const string EDITOR_PREFS_KEY = Constants.CLEANUP_DISABLE_PREF;

    [MenuItem(MENU_PATH)]
    private static void ToggleConsoleDebugPrint()
    {
      // Toggle the value
      bool currentValue = EditorPrefs.GetBool(EDITOR_PREFS_KEY, false);
      EditorPrefs.SetBool(EDITOR_PREFS_KEY, !currentValue);
    }

    [MenuItem(MENU_PATH, true)]
    private static bool ToggleConsoleDebugPrintValidation()
    {
      // Toggle the checked state
      Menu.SetChecked(MENU_PATH, EditorPrefs.GetBool(EDITOR_PREFS_KEY, false));
      return true;
    }
  }
}

#endif
